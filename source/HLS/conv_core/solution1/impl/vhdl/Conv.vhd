-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=14,HLS_SYN_FF=3183,HLS_SYN_LUT=3631}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal W : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal exitcond2_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_en_V_read_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_V_read_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V_read_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_1105 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_V_read_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V_read_reg_1124 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1129 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_out7_reg_1135 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_reg_1140 : STD_LOGIC_VECTOR (29 downto 0);
    signal W3_reg_1145 : STD_LOGIC_VECTOR (29 downto 0);
    signal feature_in1_reg_1150 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_1_fu_573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_1155 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_reg_1160 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_cast_fu_601_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_cast_reg_1165 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_605_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_reg_1170 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_fu_623_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_reg_1175 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_fu_627_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_reg_1180 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_10_cast_fu_686_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_reg_1210 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wout_V_fu_699_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1235 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_719_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1240 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1245 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_728_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_731_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast9_fu_740_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_cast9_reg_1277 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_14_cast8_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_14_cast8_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal cout_fu_756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cout_reg_1291 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_777_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul1_reg_1302 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_fu_791_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_797_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_1315 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_3_fu_1078_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_3_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_fu_802_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_1325 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_op_assign_12_cast6_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_12_cast6_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1338 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_1343 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_1348 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ii_fu_841_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1356 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_fu_847_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_fu_889_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1384 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_931_p2 : signal is "no";
    signal tmp_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_936_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1400 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal cin_fu_963_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cin_reg_1418 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal feature_in2_sum9_fu_974_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum9_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal W4_sum_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_sum_reg_1444 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tp_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal feature_out8_sum_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out8_sum_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal sum_3_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal p_s_fu_1065_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_1487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal i_op_assign_s_reg_245 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_256 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_267 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_278 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul2_reg_289 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_323 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_1_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_op_assign_5_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_369 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_1_be_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6_sum_cast_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_2_cast_fu_457_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_tr_fu_461_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg9_fu_475_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_481_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_491_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_cast_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_tr_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_539_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_549_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_507_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_589_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_cast_fu_597_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_fu_611_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_cast_fu_619_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_cast_fu_633_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_cast_fu_636_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_639_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_652_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_7_cast_fu_658_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_5_cast_fu_661_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_fu_664_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_677_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_677_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_695_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_677_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_709_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_14_cast8_1_fu_747_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias6_sum_fu_762_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_op_assign_11_cast5_fu_832_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_cast_fu_856_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_875_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_875_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_13_cast3_fu_880_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_895_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_900_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_1_cast_fu_922_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_1_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_949_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_949_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_cast1_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_969_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1010_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_to_int_fu_1019_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1022_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_1032_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_3_fu_1078_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_3_fu_1078_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_1083_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_652_ap_start : STD_LOGIC;
    signal grp_fu_652_ap_done : STD_LOGIC;
    signal grp_fu_677_ap_start : STD_LOGIC;
    signal grp_fu_677_ap_done : STD_LOGIC;
    signal grp_fu_875_ce : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal grp_fu_652_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_677_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_3_fu_1078_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_949_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component Conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_19s_9nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_32s_16nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        W : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv_AXILiteS_s_axi_U : component Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        CHout_V => CHout_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        relu_en_V => relu_en_V,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out);

    Conv_gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => feature_out8_sum_reg_1475,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => p_s_reg_1487,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv_fadd_32ns_32bkb_U0 : component Conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    Conv_fmul_32ns_32cud_U1 : component Conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_411,
        din1 => gmem_addr_3_read_reg_1455,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    Conv_fcmp_32ns_32dEe_U2 : component Conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_1480,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_35_fu_406_p2);

    Conv_sdiv_19s_9nseOg_U3 : component Conv_sdiv_19s_9nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_652_ap_start,
        done => grp_fu_652_ap_done,
        din0 => grp_fu_652_p0,
        din1 => grp_fu_652_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_652_p2);

    Conv_sdiv_19s_9nseOg_U4 : component Conv_sdiv_19s_9nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_677_ap_start,
        done => grp_fu_677_ap_done,
        din0 => grp_fu_677_p0,
        din1 => grp_fu_677_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_677_p2);

    Conv_mul_32s_16nsfYi_U5 : component Conv_mul_32s_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_875_p0,
        din1 => grp_fu_875_p1,
        ce => grp_fu_875_ce,
        dout => grp_fu_875_p2);

    Conv_mul_32s_16nsfYi_U6 : component Conv_mul_32s_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1395,
        din1 => grp_fu_942_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_942_p2);

    Conv_mul_32s_16nsfYi_U7 : component Conv_mul_32s_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_984_p0,
        din1 => grp_fu_984_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_984_p2);

    Conv_mul_mul_16nsg8j_U8 : component Conv_mul_mul_16nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_3_fu_1078_p0,
        din1 => p_3_fu_1078_p1,
        dout => p_3_fu_1078_p2);

    Conv_mul_mul_16nshbi_U9 : component Conv_mul_mul_16nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_26_fu_1083_p0,
        din1 => h_V_fu_847_p2,
        dout => tmp_26_fu_1083_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state28) and not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_state36) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state37) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state28) and not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state36) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state37) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state67)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state68)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = exitcond_fu_811_p2)))) then 
                i_op_assign_1_reg_256 <= i_reg_1310;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond5_fu_751_p2))) then 
                i_op_assign_1_reg_256 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond1_fu_786_p2))) then 
                i_op_assign_2_reg_278 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state73) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_2_reg_278 <= j_reg_1338;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_lv1_0 = exitcond3_fu_884_p2)))) then 
                i_op_assign_3_reg_312 <= ii_reg_1356;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond_fu_811_p2))) then 
                i_op_assign_3_reg_312 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_5_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
                i_op_assign_5_reg_347 <= jj_reg_1384;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state28) and (exitcond2_fu_836_p2 = ap_const_lv1_0) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                i_op_assign_5_reg_347 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
                i_op_assign_reg_369 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state53))) then 
                i_op_assign_reg_369 <= cin_reg_1418;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = exitcond1_fu_786_p2)))) then 
                i_op_assign_s_reg_245 <= cout_reg_1291;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
                i_op_assign_s_reg_245 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = exitcond_fu_811_p2)))) then 
                phi_mul1_reg_267 <= next_mul1_reg_1302;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond5_fu_751_p2))) then 
                phi_mul1_reg_267 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond1_fu_786_p2))) then 
                phi_mul2_reg_289 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state73) and not((gmem_BVALID = ap_const_logic_0)))) then 
                phi_mul2_reg_289 <= next_mul2_reg_1325;
            end if; 
        end if;
    end process;

    phi_mul_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_lv1_0 = exitcond3_fu_884_p2)))) then 
                phi_mul_reg_323 <= next_mul_reg_1348;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond_fu_811_p2))) then 
                phi_mul_reg_323 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_1_be_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state33) and not((ap_const_lv1_0 = exitcond4_fu_958_p2)))) then 
                sum_1_be_reg_380 <= sum_2_reg_358;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond3_fu_884_p2) and not((ap_const_lv1_0 = brmerge_fu_913_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond3_fu_884_p2) and (ap_const_lv1_0 = brmerge_fu_913_p2) and (ap_const_lv1_0 = tmp_31_fu_926_p2)))) then 
                sum_1_be_reg_380 <= sum_1_reg_335;
            end if; 
        end if;
    end process;

    sum_1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
                sum_1_reg_335 <= sum_1_be_reg_380;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state28) and (exitcond2_fu_836_p2 = ap_const_lv1_0) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                sum_1_reg_335 <= sum_reg_300;
            end if; 
        end if;
    end process;

    sum_2_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
                sum_2_reg_358 <= sum_1_reg_335;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state53))) then 
                sum_2_reg_358 <= grp_fu_396_p2;
            end if; 
        end if;
    end process;

    sum_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_lv1_0 = exitcond3_fu_884_p2)))) then 
                sum_reg_300 <= sum_1_reg_335;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond_fu_811_p2))) then 
                sum_reg_300 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                CHin_V_read_reg_1129 <= CHin_V;
                CHout_V_read_reg_1118 <= CHout_V;
                Kx_V_read_reg_1111 <= Kx_V;
                Ky_V_read_reg_1105 <= Ky_V;
                Sx_V_read_reg_1099 <= Sx_V;
                Sy_V_read_reg_1093 <= Sy_V;
                W3_reg_1145 <= W(31 downto 2);
                Win_V_read_reg_1124 <= Win_V;
                feature_in1_reg_1150 <= feature_in(31 downto 2);
                feature_out7_reg_1135 <= feature_out(31 downto 2);
                    lhs_V_2_cast_reg_1165(15 downto 0) <= lhs_V_2_cast_fu_601_p1(15 downto 0);
                    lhs_V_4_cast_reg_1175(15 downto 0) <= lhs_V_4_cast_fu_623_p1(15 downto 0);
                p_1_reg_1155 <= p_1_fu_573_p3;
                p_2_reg_1160 <= p_2_fu_581_p3;
                r_V_3_reg_1170 <= r_V_3_fu_605_p2;
                r_V_7_reg_1180 <= r_V_7_fu_627_p2;
                relu_en_V_read_reg_1088 <= relu_en_V;
                tmp_1_reg_1140 <= bias(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) then
                W4_sum_reg_1444 <= W4_sum_fu_999_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then
                Wout_V_reg_1225 <= Wout_V_fu_699_p2;
                    rhs_V_1_reg_1271(15 downto 0) <= rhs_V_1_fu_737_p1(15 downto 0);
                    tmp_10_cast_reg_1210(29 downto 0) <= tmp_10_cast_fu_686_p1(29 downto 0);
                    tmp_12_reg_1256(7 downto 0) <= tmp_12_fu_728_p1(7 downto 0);
                    tmp_16_reg_1261(7 downto 0) <= tmp_16_fu_731_p1(7 downto 0);
                    tmp_20_reg_1266(15 downto 0) <= tmp_20_fu_734_p1(15 downto 0);
                    tmp_21_cast9_reg_1277(7 downto 0) <= tmp_21_cast9_fu_740_p1(7 downto 0);
                    tmp_27_reg_1250(15 downto 0) <= tmp_27_fu_725_p1(15 downto 0);
                    tmp_2_reg_1205(29 downto 0) <= tmp_2_fu_683_p1(29 downto 0);
                    tmp_4_reg_1230(15 downto 0) <= tmp_4_fu_705_p1(15 downto 0);
                    tmp_5_reg_1215(29 downto 0) <= tmp_5_fu_689_p1(29 downto 0);
                tmp_7_reg_1235 <= tmp_7_fu_713_p2;
                    tmp_8_reg_1220(29 downto 0) <= tmp_8_fu_692_p1(29 downto 0);
                    tmp_9_reg_1240(7 downto 0) <= tmp_9_fu_719_p1(7 downto 0);
                    tmp_s_reg_1245(7 downto 0) <= tmp_s_fu_722_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state33))) then
                cin_reg_1418 <= cin_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then
                cout_reg_1291 <= cout_fu_756_p2;
                    i_op_assign_14_cast8_reg_1282(15 downto 0) <= i_op_assign_14_cast8_fu_743_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond4_fu_958_p2))) then
                feature_in2_sum9_reg_1423 <= feature_in2_sum9_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state57))) then
                feature_out8_sum_reg_1475 <= feature_out8_sum_fu_1014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44) and not((gmem_RVALID = ap_const_logic_0)))) then
                gmem_addr_3_read_reg_1455 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond5_fu_751_p2))) then
                    gmem_addr_reg_1296(30 downto 0) <= bias6_sum_cast_fu_767_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and (exitcond2_fu_836_p2 = ap_const_lv1_0) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                h_V_reg_1361 <= h_V_fu_847_p2;
                rev_reg_1371 <= rev_fu_865_p2;
                tmp_26_reg_1366 <= tmp_26_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then
                    i_op_assign_12_cast6_reg_1330(15 downto 0) <= i_op_assign_12_cast6_fu_807_p1(15 downto 0);
                j_reg_1338 <= j_fu_816_p2;
                next_mul2_reg_1325 <= next_mul2_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then
                i_reg_1310 <= i_fu_791_p2;
                next_mul1_reg_1302 <= next_mul1_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                ii_reg_1356 <= ii_fu_841_p2;
                next_mul_reg_1348 <= next_mul_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then
                jj_reg_1384 <= jj_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond1_fu_786_p2))) then
                p_3_reg_1320 <= p_3_fu_1078_p2;
                tmp_14_reg_1315 <= tmp_14_fu_797_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state67) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then
                p_s_reg_1487 <= p_s_fu_1065_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state43) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state61) and not((gmem_RVALID = ap_const_logic_0))))) then
                reg_411 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state66))) then
                sum_3_reg_1480 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then
                tmp2_reg_1470 <= grp_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then
                tmp3_reg_1410 <= grp_fu_942_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond3_fu_884_p2) and (ap_const_lv1_0 = brmerge_fu_913_p2) and not((ap_const_lv1_0 = tmp_31_fu_926_p2)))) then
                tmp4_reg_1400 <= tmp4_fu_936_p2;
                tmp_reg_1395 <= tmp_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30))) then
                tmp5_reg_1405 <= tmp5_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state35))) then
                tmp7_reg_1433 <= grp_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond_fu_811_p2))) then
                tmp_18_reg_1343 <= tmp_18_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state48))) then
                tp_reg_1460 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    lhs_V_2_cast_reg_1165(16) <= '0';
    lhs_V_4_cast_reg_1175(16) <= '0';
    tmp_2_reg_1205(31 downto 30) <= "00";
    tmp_10_cast_reg_1210(30) <= '0';
    tmp_5_reg_1215(31 downto 30) <= "00";
    tmp_8_reg_1220(31 downto 30) <= "00";
    tmp_4_reg_1230(31 downto 16) <= "0000000000000000";
    tmp_9_reg_1240(15 downto 8) <= "00000000";
    tmp_s_reg_1245(15 downto 8) <= "00000000";
    tmp_27_reg_1250(31 downto 16) <= "0000000000000000";
    tmp_12_reg_1256(15 downto 8) <= "00000000";
    tmp_16_reg_1261(15 downto 8) <= "00000000";
    tmp_20_reg_1266(31 downto 16) <= "0000000000000000";
    rhs_V_1_reg_1271(31 downto 16) <= "0000000000000000";
    tmp_21_cast9_reg_1277(15 downto 8) <= "00000000";
    i_op_assign_14_cast8_reg_1282(31 downto 16) <= "0000000000000000";
    gmem_addr_reg_1296(31) <= '0';
    i_op_assign_12_cast6_reg_1330(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_836_p2, gmem_RVALID, gmem_BVALID, exitcond5_fu_751_p2, exitcond1_fu_786_p2, exitcond_fu_811_p2, ap_sig_ioackin_gmem_ARREADY, exitcond3_fu_884_p2, brmerge_fu_913_p2, tmp_31_fu_926_p2, exitcond4_fu_958_p2, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_751_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_786_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (not((ap_const_lv1_0 = exitcond_fu_811_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((exitcond2_fu_836_p2 = ap_const_lv1_0) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif ((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_884_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((ap_const_lv1_0 = exitcond3_fu_884_p2) and (ap_const_lv1_0 = brmerge_fu_913_p2) and not((ap_const_lv1_0 = tmp_31_fu_926_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_958_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    W4_sum_fu_999_p2 <= std_logic_vector(unsigned(tmp_5_reg_1215) + unsigned(tmp_34_fu_995_p2));
    Wout_V_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_22_fu_695_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state35 <= ap_CS_fsm(34 downto 34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35 downto 35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36 downto 36);
    ap_CS_fsm_state43 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43 downto 43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44 downto 44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47 downto 47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state53 <= ap_CS_fsm(52 downto 52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55 downto 55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56 downto 56);
    ap_CS_fsm_state61 <= ap_CS_fsm(60 downto 60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state66 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66 downto 66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67 downto 67);
    ap_CS_fsm_state73 <= ap_CS_fsm(72 downto 72);

    ap_done_assign_proc : process(ap_CS_fsm_state25, exitcond5_fu_751_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((ap_const_lv1_0 = exitcond5_fu_751_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, exitcond5_fu_751_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((ap_const_lv1_0 = exitcond5_fu_751_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias6_sum_cast_fu_767_p1 <= std_logic_vector(resize(unsigned(bias6_sum_fu_762_p2),32));
    bias6_sum_fu_762_p2 <= std_logic_vector(unsigned(tmp_10_cast_reg_1210) + unsigned(i_op_assign_14_cast8_1_fu_747_p1));
    brmerge_fu_913_p2 <= (tmp_36_fu_905_p3 or rev_reg_1371);
    cin_fu_963_p2 <= std_logic_vector(unsigned(i_op_assign_reg_369) + unsigned(ap_const_lv16_1));
    cout_fu_756_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_245) + unsigned(ap_const_lv16_1));
    exitcond1_fu_786_p2 <= "1" when (i_op_assign_1_reg_256 = tmp_7_reg_1235) else "0";
    exitcond2_fu_836_p2 <= "1" when (i_op_assign_3_reg_312 = Ky_V_read_reg_1105) else "0";
    exitcond3_fu_884_p2 <= "1" when (i_op_assign_5_reg_347 = Kx_V_read_reg_1111) else "0";
    exitcond4_fu_958_p2 <= "1" when (i_op_assign_reg_369 = CHin_V_read_reg_1129) else "0";
    exitcond5_fu_751_p2 <= "1" when (i_op_assign_s_reg_245 = CHout_V_read_reg_1118) else "0";
    exitcond_fu_811_p2 <= "1" when (i_op_assign_2_reg_278 = Wout_V_reg_1225) else "0";
    feature_in2_sum9_fu_974_p2 <= std_logic_vector(unsigned(tmp_8_reg_1220) + unsigned(tmp_32_fu_969_p2));
    feature_out8_sum_fu_1014_p2 <= std_logic_vector(unsigned(tmp_23_fu_1010_p2) + unsigned(tmp_2_reg_1205));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_836_p2, ap_CS_fsm_state36, ap_CS_fsm_state37, gmem_addr_reg_1296, feature_in2_sum9_reg_1423, W4_sum_reg_1444, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state37)) then 
                gmem_ARADDR <= W4_sum_reg_1444;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state36)) then 
                gmem_ARADDR <= feature_in2_sum9_reg_1423;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((exitcond2_fu_836_p2 = ap_const_lv1_0)))) then 
                gmem_ARADDR <= gmem_addr_reg_1296;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_836_p2, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state28) and not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state36) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state37) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state67, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state67) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state73, gmem_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state73) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state43, ap_CS_fsm_state44, gmem_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state43) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state61) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state44) and not((gmem_RVALID = ap_const_logic_0))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state68, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state68) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state28, exitcond2_fu_836_p2, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state28) and not((exitcond2_fu_836_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state37)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state67)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state67))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state61, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_1 = ap_CS_fsm_state43)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state68)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state68))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(sum_reg_300, sum_2_reg_358, ap_CS_fsm_state49, ap_CS_fsm_state62)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
            grp_fu_396_p0 <= sum_reg_300;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            grp_fu_396_p0 <= sum_2_reg_358;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p1_assign_proc : process(reg_411, tp_reg_1460, ap_CS_fsm_state49, ap_CS_fsm_state62)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
            grp_fu_396_p1 <= reg_411;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            grp_fu_396_p1 <= tp_reg_1460;
        else 
            grp_fu_396_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_652_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_652_ap_start <= ap_const_logic_1;
        else 
            grp_fu_652_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_652_p0 <= std_logic_vector(resize(signed(r_V_4_fu_639_p2),19));

    grp_fu_652_p1 <= grp_fu_652_p10(9 - 1 downto 0);
    grp_fu_652_p10 <= std_logic_vector(resize(unsigned(Sx_V_read_reg_1099),19));

    grp_fu_677_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_677_ap_start <= ap_const_logic_1;
        else 
            grp_fu_677_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_677_p0 <= std_logic_vector(resize(signed(r_V_8_fu_664_p2),19));

    grp_fu_677_p1 <= grp_fu_677_p10(9 - 1 downto 0);
    grp_fu_677_p10 <= std_logic_vector(resize(unsigned(Sy_V_read_reg_1093),19));

    grp_fu_875_ce_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_836_p2, ap_sig_ioackin_gmem_ARREADY, ap_CS_fsm_state56, ap_CS_fsm_state55)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state28) and not((not((exitcond2_fu_836_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or (ap_const_lv1_1 = ap_CS_fsm_state56) or (ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            grp_fu_875_ce <= ap_const_logic_1;
        else 
            grp_fu_875_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_875_p0 <= std_logic_vector(unsigned(p_3_reg_1320) + unsigned(i_op_assign_12_cast6_reg_1330));
    grp_fu_875_p1 <= tmp_27_reg_1250(16 - 1 downto 0);
    grp_fu_942_p1 <= rhs_V_1_reg_1271(16 - 1 downto 0);
    grp_fu_984_p0 <= std_logic_vector(unsigned(tmp5_reg_1405) + unsigned(i_op_assign_cast1_fu_954_p1));
    grp_fu_984_p1 <= tmp_27_reg_1250(16 - 1 downto 0);
    h_V_fu_847_p2 <= std_logic_vector(unsigned(i_op_assign_11_cast5_fu_832_p1) + unsigned(tmp_14_reg_1315));
    i_fu_791_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_256) + unsigned(ap_const_lv16_1));
    i_op_assign_11_cast5_fu_832_p1 <= std_logic_vector(resize(unsigned(i_op_assign_3_reg_312),16));
    i_op_assign_12_cast6_fu_807_p1 <= std_logic_vector(resize(unsigned(i_op_assign_2_reg_278),32));
    i_op_assign_13_cast3_fu_880_p1 <= std_logic_vector(resize(unsigned(i_op_assign_5_reg_347),16));
    i_op_assign_14_cast8_1_fu_747_p1 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_245),31));
    i_op_assign_14_cast8_fu_743_p1 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_245),32));
    i_op_assign_cast1_fu_954_p1 <= std_logic_vector(resize(unsigned(i_op_assign_reg_369),32));
    ii_fu_841_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_312) + unsigned(ap_const_lv8_1));
    j_fu_816_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_278) + unsigned(ap_const_lv16_1));
    jj_fu_889_p2 <= std_logic_vector(unsigned(i_op_assign_5_reg_347) + unsigned(ap_const_lv8_1));
        lhs_V_1_cast_fu_922_p1 <= std_logic_vector(resize(signed(w_V_fu_895_p2),17));

        lhs_V_1_fu_918_p1 <= std_logic_vector(resize(signed(w_V_fu_895_p2),32));

    lhs_V_2_cast_fu_601_p1 <= std_logic_vector(resize(unsigned(Win_V),17));
    lhs_V_4_cast_fu_623_p1 <= std_logic_vector(resize(unsigned(Hin_V),17));
        lhs_V_cast_fu_856_p1 <= std_logic_vector(resize(signed(h_V_fu_847_p2),17));

    next_mul1_fu_777_p2 <= std_logic_vector(unsigned(phi_mul1_reg_267) + unsigned(tmp_12_reg_1256));
    next_mul2_fu_802_p2 <= std_logic_vector(unsigned(phi_mul2_reg_289) + unsigned(tmp_16_reg_1261));
    next_mul_fu_827_p2 <= std_logic_vector(unsigned(phi_mul_reg_323) + unsigned(tmp_21_cast9_reg_1277));
    notlhs_fu_1036_p2 <= "0" when (tmp_28_fu_1022_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1042_p2 <= "1" when (tmp_29_fu_1032_p1 = ap_const_lv23_0) else "0";
    p_1_fu_573_p3 <= 
        pad_x_V_fu_507_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_2_fu_581_p3 <= 
        pad_y_V_fu_565_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_3_fu_1078_p0 <= p_3_fu_1078_p00(16 - 1 downto 0);
    p_3_fu_1078_p00 <= std_logic_vector(resize(unsigned(i_op_assign_1_reg_256),32));
    p_3_fu_1078_p1 <= tmp_4_reg_1230(16 - 1 downto 0);
    p_neg9_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(tmp_2_cast_fu_457_p1));
    p_neg_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(tmp_24_cast_fu_515_p1));
    p_s_fu_1065_p3 <= 
        ap_const_lv32_0 when (r_V_fu_1060_p2(0) = '1') else 
        sum_3_reg_1480;
    pad_x_V_fu_507_p3 <= 
        tmp_6_fu_501_p2 when (tmp_10_fu_467_p3(0) = '1') else 
        tmp_11_fu_491_p4;
    pad_y_V_fu_565_p3 <= 
        tmp_19_fu_559_p2 when (tmp_13_fu_525_p3(0) = '1') else 
        tmp_17_fu_549_p4;
    r_V_1_tr_fu_519_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(tmp_24_cast_fu_515_p1));
    r_V_2_cast_fu_597_p1 <= std_logic_vector(resize(unsigned(r_V_2_fu_589_p3),17));
    r_V_2_fu_589_p3 <= (p_1_fu_573_p3 & ap_const_lv1_0);
    r_V_3_cast_fu_633_p1 <= std_logic_vector(resize(unsigned(r_V_3_reg_1170),18));
    r_V_3_fu_605_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_601_p1) + unsigned(r_V_2_cast_fu_597_p1));
    r_V_4_fu_639_p2 <= std_logic_vector(unsigned(r_V_3_cast_fu_633_p1) - unsigned(rhs_V_2_cast_fu_636_p1));
    r_V_6_cast_fu_619_p1 <= std_logic_vector(resize(unsigned(r_V_6_fu_611_p3),17));
    r_V_6_fu_611_p3 <= (p_2_fu_581_p3 & ap_const_lv1_0);
    r_V_7_cast_fu_658_p1 <= std_logic_vector(resize(unsigned(r_V_7_reg_1180),18));
    r_V_7_fu_627_p2 <= std_logic_vector(unsigned(lhs_V_4_cast_fu_623_p1) + unsigned(r_V_6_cast_fu_619_p1));
    r_V_8_fu_664_p2 <= std_logic_vector(unsigned(r_V_7_cast_fu_658_p1) - unsigned(rhs_V_5_cast_fu_661_p1));
    r_V_fu_1060_p2 <= (rhs_V_fu_1054_p2 and relu_en_V_read_reg_1088);
    r_V_tr_fu_461_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(tmp_2_cast_fu_457_p1));
    rev_fu_865_p2 <= (slt_fu_860_p2 xor ap_const_lv1_1);
    rhs_V_1_fu_737_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1129),32));
    rhs_V_2_cast_fu_636_p1 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1111),18));
    rhs_V_5_cast_fu_661_p1 <= std_logic_vector(resize(unsigned(Ky_V_read_reg_1105),18));
    rhs_V_fu_1054_p2 <= (tmp_33_fu_1048_p2 and tmp_35_fu_406_p2);
    slt_fu_860_p2 <= "1" when (signed(lhs_V_cast_fu_856_p1) < signed(lhs_V_4_cast_reg_1175)) else "0";
    sum_4_to_int_fu_1019_p1 <= sum_3_reg_1480;
    tmp4_fu_936_p2 <= std_logic_vector(unsigned(i_op_assign_13_cast3_fu_880_p1) + unsigned(phi_mul_reg_323));
    tmp5_fu_949_p0 <= tmp5_fu_949_p00(16 - 1 downto 0);
    tmp5_fu_949_p00 <= std_logic_vector(resize(unsigned(tmp4_reg_1400),32));
    tmp5_fu_949_p1 <= rhs_V_1_reg_1271(16 - 1 downto 0);
    tmp5_fu_949_p2 <= std_logic_vector(resize(unsigned(tmp5_fu_949_p0) * unsigned(tmp5_fu_949_p1), 32));
    tmp_10_cast_fu_686_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_1140),31));
    tmp_10_fu_467_p3 <= r_V_tr_fu_461_p2(8 downto 8);
    tmp_11_fu_491_p4 <= r_V_tr_fu_461_p2(8 downto 1);
    tmp_12_fu_728_p1 <= std_logic_vector(resize(unsigned(Sy_V_read_reg_1093),16));
    tmp_13_fu_525_p3 <= r_V_1_tr_fu_519_p2(8 downto 8);
    tmp_14_fu_797_p2 <= std_logic_vector(unsigned(phi_mul1_reg_267) - unsigned(tmp_9_reg_1240));
    tmp_15_fu_539_p4 <= p_neg_fu_533_p2(8 downto 1);
    tmp_16_fu_731_p1 <= std_logic_vector(resize(unsigned(Sx_V_read_reg_1099),16));
    tmp_17_fu_549_p4 <= r_V_1_tr_fu_519_p2(8 downto 1);
    tmp_18_fu_822_p2 <= std_logic_vector(unsigned(phi_mul2_reg_289) - unsigned(tmp_s_reg_1245));
    tmp_19_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_15_fu_539_p4));
    tmp_20_fu_734_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_1124),32));
    tmp_21_cast9_fu_740_p1 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1111),16));
    tmp_22_fu_695_p1 <= grp_fu_652_p2(16 - 1 downto 0);
    tmp_23_fu_1010_p2 <= std_logic_vector(unsigned(tmp2_reg_1470) + unsigned(i_op_assign_14_cast8_reg_1282));
    tmp_24_cast_fu_515_p1 <= std_logic_vector(resize(unsigned(Ky_V),9));
    tmp_25_fu_709_p1 <= grp_fu_677_p2(16 - 1 downto 0);
    tmp_26_fu_1083_p0 <= tmp_20_reg_1266(16 - 1 downto 0);
    tmp_27_fu_725_p1 <= std_logic_vector(resize(unsigned(CHout_V_read_reg_1118),32));
    tmp_28_fu_1022_p4 <= sum_4_to_int_fu_1019_p1(30 downto 23);
    tmp_29_fu_1032_p1 <= sum_4_to_int_fu_1019_p1(23 - 1 downto 0);
    tmp_2_cast_fu_457_p1 <= std_logic_vector(resize(unsigned(Kx_V),9));
    tmp_2_fu_683_p1 <= std_logic_vector(resize(unsigned(feature_out7_reg_1135),32));
    tmp_30_fu_900_p2 <= (w_V_fu_895_p2 or h_V_reg_1361);
    tmp_31_fu_926_p2 <= "1" when (signed(lhs_V_1_cast_fu_922_p1) < signed(lhs_V_2_cast_reg_1165)) else "0";
    tmp_32_fu_969_p2 <= std_logic_vector(unsigned(tmp3_reg_1410) + unsigned(i_op_assign_cast1_fu_954_p1));
    tmp_33_fu_1048_p2 <= (notrhs_fu_1042_p2 or notlhs_fu_1036_p2);
    tmp_34_fu_995_p2 <= std_logic_vector(unsigned(tmp7_reg_1433) + unsigned(i_op_assign_14_cast8_reg_1282));
    tmp_36_fu_905_p3 <= tmp_30_fu_900_p2(15 downto 15);
    tmp_3_fu_481_p4 <= p_neg9_fu_475_p2(8 downto 1);
    tmp_4_fu_705_p1 <= std_logic_vector(resize(unsigned(Wout_V_fu_699_p2),32));
    tmp_5_fu_689_p1 <= std_logic_vector(resize(unsigned(W3_reg_1145),32));
    tmp_6_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_3_fu_481_p4));
    tmp_7_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_25_fu_709_p1));
    tmp_8_fu_692_p1 <= std_logic_vector(resize(unsigned(feature_in1_reg_1150),32));
    tmp_9_fu_719_p1 <= std_logic_vector(resize(unsigned(p_2_reg_1160),16));
    tmp_fu_931_p2 <= std_logic_vector(signed(tmp_26_reg_1366) + signed(lhs_V_1_fu_918_p1));
    tmp_s_fu_722_p1 <= std_logic_vector(resize(unsigned(p_1_reg_1155),16));
    w_V_fu_895_p2 <= std_logic_vector(unsigned(i_op_assign_13_cast3_fu_880_p1) + unsigned(tmp_18_reg_1343));
end behav;
