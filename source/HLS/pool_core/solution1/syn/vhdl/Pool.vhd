-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Pool,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.820000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=15,HLS_SYN_FF=8452,HLS_SYN_LUT=12077}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (106 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (106 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (106 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (106 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (106 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (106 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (106 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (106 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (106 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (106 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (106 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv12_FFE : STD_LOGIC_VECTOR (11 downto 0) := "111111111110";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_5BB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "01011011101100011010001010111100";
    constant ap_const_lv32_DBB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "11011011101100011010001010111100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal mode_V_read_reg_1974 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state101 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state102 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state107 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_391 : BOOLEAN;
    signal Ky_V_read_reg_1980 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_1986 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_V_read_reg_1993 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1998 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_out3_reg_2004 : STD_LOGIC_VECTOR (29 downto 0);
    signal feature_in1_reg_2009 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_2019 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2024 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_op_assign_reg_2035 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_2040 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_2045 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_fu_481_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_reg_2050 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_reg_2055 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_reg_2060 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_2065 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal loc_V_reg_2074 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_515_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_2082 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_27_fu_534_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_27_reg_2093 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_2103 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_3_i_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_reg_2108 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_686_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp6_i_reg_2113 : STD_LOGIC_VECTOR (63 downto 0);
    signal isneg_reg_2118 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal p_Result_17_fu_759_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_17_reg_2128 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_763_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_reg_2133 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_10_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_2138 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_775_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_2146 : STD_LOGIC_VECTOR (11 downto 0);
    signal QUAN_INC_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal QUAN_INC_reg_2155 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_809_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2160 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_2167 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_reg_2172 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_amt_cast_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_cast_reg_2177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_13_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_2182 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_860_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_59_reg_2187 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_76_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_938_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_6_reg_2199 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_77_reg_2205 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_2211 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_2217 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_2224 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_979_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos1_reg_2230 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_2235 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_2242 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_2249 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_2256 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_2261 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_reg_2267 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_2272 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_2277 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_reg_2282 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_1161_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_7_reg_2288 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal sign_assign_fu_1361_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_assign_reg_2295 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_2301 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge121_demorgan_s_fu_1397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge121_demorgan_s_reg_2307 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_14_fu_1406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_2318 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wout_V_fu_1544_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_2325 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_1548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_2331 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_2336 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_2344 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_2348 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_fu_1579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_reg_2353 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp48_fu_1943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp48_reg_2358 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_18_cast_fu_1587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_18_cast_reg_2363 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal c_fu_1596_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_reg_2372 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul9_fu_1602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul9_reg_2377 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_fu_1616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_2385 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_4_fu_1948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_4_reg_2390 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_1622_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_2395 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_op_assign_16_cast_fu_1627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_16_cast_reg_2400 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_1636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_2408 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_fu_1647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_2416 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal exitcond2_fu_1642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_45_fu_1672_p2 : signal is "no";
    signal tmp_45_reg_2426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal jj_fu_1682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_2436 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal w_V_fu_1692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_reg_2441 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond3_fu_1677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in2_sum_fu_1701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of feature_in2_sum_fu_1701_p2 : signal is "no";
    signal feature_in2_sum_reg_2448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal feature_in2_sum5_fu_1708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of feature_in2_sum5_fu_1708_p2 : signal is "no";
    signal feature_in2_sum5_reg_2453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_reg_2470 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_56_reg_2475 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_feature_in_loa_fu_1807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal feature_in_load_1_su_fu_1898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum6_fu_1909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of feature_in2_sum6_fu_1909_p2 : signal is "no";
    signal feature_in2_sum6_reg_2490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_2501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_fu_1923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_2516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal feature_out4_sum_fu_1932_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out4_sum_reg_2521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal op_assign_s_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_s_reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul8_reg_297 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_309 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_320 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal i_op_assign_4_reg_365 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_be_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal sum_5_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_414_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_434_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_5_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_V_fu_519_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_572_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_14_fu_583_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_i_cast_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_8_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_2_fu_604_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_15_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_3_fu_614_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_V_1_fu_629_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_i_fu_635_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_V_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_fu_618_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_fu_641_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_16_fu_647_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond_i_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_i_i_i_i_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp5_demorgan_i_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_672_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp7_i_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_assign_fu_704_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_727_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_737_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_fu_747_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_fu_751_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_38_fu_715_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_57_fu_781_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_797_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_803_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_V_fu_741_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp67_cast_cast_fu_823_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_831_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_16_fu_847_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_17_fu_874_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_18_fu_878_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_15_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_884_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_5_fu_888_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_903_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_cast_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_912_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_895_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal qb_fu_920_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_934_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp1_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos2_fu_988_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_80_fu_1003_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_cast_fu_984_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1017_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_28_fu_1021_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_1027_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos2_cast_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1057_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_1061_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_fu_1067_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_33_not_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1127_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp7_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1137_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_fu_1123_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp9_fu_1154_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp66_demorgan_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond115_i_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_i_fu_1202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond117_i_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_1232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_119_i_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_122_i_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_1245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_i_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_i_fu_1237_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_2_i_fu_1252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp18_not_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_not_i_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_no_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_1302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge123_i_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_mu_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_120_i_fu_1309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_i_41_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_1335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_fu_1184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_not_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_0_not_s_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_0_i_fu_1340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge121_i_fu_1409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_assign_not_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_1429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_42_fu_1446_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp57_demorgan_fu_1465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_1458_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal brmerge_fu_1434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_1476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp37_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_1487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_mux_fu_1439_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp18_fu_1469_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal wout_V_fu_1492_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_1500_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_85_fu_1518_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1522_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_84_fu_1510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1528_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_1_fu_1536_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_fu_1560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_1565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1653_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_1657_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_1688_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1953_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_to_int1_fu_1724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_2_to_fu_1742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1728_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_1738_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1746_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_fu_1756_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_1778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_1802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_to_int_fu_1815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_to_fu_1833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_1819_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_fu_1829_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_1857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1837_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_1847_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_1875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_1869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1967_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1923_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_1928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp48_fu_1943_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp48_fu_1943_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_4_fu_1948_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_4_fu_1948_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1953_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1960_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1967_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_422_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (106 downto 0);
    signal p_4_fu_1948_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_487_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_487_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp48_fu_1943_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component Pool_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fdiv_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_sitofp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fcmp_32ns_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Pool_dadddsub_64nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Pool_ddiv_64ns_64g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Pool_sitodp_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Pool_mul_32s_16s_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mul_32s_16nsjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mul_mul_16nskbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mac_muladd_1lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mask_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component Pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mask_table1_U : component Pool_mask_table1
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    Pool_AXILiteS_s_axi_U : component Pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        feature_in => feature_in,
        feature_out => feature_out);

    Pool_gmem_m_axi_U : component Pool_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => feature_out4_sum_reg_2521,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_5_reg_392,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Pool_fadd_32ns_32bkb_U0 : component Pool_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_3_reg_353,
        din1 => reg_442,
        ce => ap_const_logic_1,
        dout => grp_fu_404_p2);

    Pool_fdiv_32ns_32cud_U1 : component Pool_fdiv_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_1_reg_332,
        din1 => tmp_40_reg_2348,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p2);

    Pool_sitofp_32ns_dEe_U2 : component Pool_sitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_414_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_414_p1);

    Pool_fcmp_32ns_32eOg_U3 : component Pool_fcmp_32ns_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_353,
        din1 => reg_442,
        opcode => ap_const_lv5_2,
        dout => grp_fu_417_p2);

    Pool_dadddsub_64nfYi_U4 : component Pool_dadddsub_64nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_422_p0,
        din1 => grp_fu_422_p1,
        opcode => grp_fu_422_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p2);

    Pool_ddiv_64ns_64g8j_U5 : component Pool_ddiv_64ns_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_6_reg_2019,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p2);

    Pool_sitodp_32ns_hbi_U6 : component Pool_sitodp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p1);

    Pool_sitodp_32ns_hbi_U7 : component Pool_sitodp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_434_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_434_p1);

    Pool_mul_32s_16s_ibs_U8 : component Pool_mul_32s_16s_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp48_reg_2358,
        din1 => h_V_fu_1657_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1667_p2);

    Pool_mul_32s_16nsjbC_U9 : component Pool_mul_32s_16nsjbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1923_p0,
        din1 => grp_fu_1923_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1923_p2);

    Pool_mul_mul_16nskbM_U10 : component Pool_mul_mul_16nskbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp48_fu_1943_p0,
        din1 => tmp48_fu_1943_p1,
        dout => tmp48_fu_1943_p2);

    Pool_mul_mul_16nskbM_U11 : component Pool_mul_mul_16nskbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_4_fu_1948_p0,
        din1 => p_4_fu_1948_p1,
        dout => p_4_fu_1948_p2);

    Pool_mac_muladd_1lbW_U12 : component Pool_mac_muladd_1lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => w_V_reg_2441,
        din1 => grp_fu_1953_p1,
        din2 => tmp_45_reg_2426,
        dout => grp_fu_1953_p3);

    Pool_mac_muladd_1lbW_U13 : component Pool_mac_muladd_1lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => w_V_reg_2441,
        din1 => grp_fu_1960_p1,
        din2 => tmp_45_reg_2426,
        dout => grp_fu_1960_p3);

    Pool_mac_muladd_1lbW_U14 : component Pool_mac_muladd_1lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => w_V_reg_2441,
        din1 => grp_fu_1967_p1,
        din2 => tmp_45_reg_2426,
        dout => grp_fu_1967_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_2) and not((((mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_1) and not((((mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_state68) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state68) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state101)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state102)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51) and (ap_const_lv1_0 = exitcond_fu_1631_p2))) then 
                i_op_assign_1_reg_332 <= p_sum_reg_2353;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_lv1_0 = exitcond3_fu_1677_p2)))) then 
                i_op_assign_1_reg_332 <= sum_3_reg_353;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50) and (exitcond1_fu_1611_p2 = ap_const_lv1_0))) then 
                i_op_assign_2_reg_309 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state107) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_2_reg_309 <= j_reg_2408;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51) and (ap_const_lv1_0 = exitcond_fu_1631_p2))) then 
                i_op_assign_3_reg_342 <= ap_const_lv8_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_lv1_0 = exitcond3_fu_1677_p2)))) then 
                i_op_assign_3_reg_342 <= ii_reg_2416;
            end if; 
        end if;
    end process;

    i_op_assign_4_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state82))) then 
                i_op_assign_4_reg_365 <= jj_reg_2436;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
                i_op_assign_4_reg_365 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond4_fu_1591_p2))) then 
                i_op_assign_s_reg_286 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state51) and not((ap_const_lv1_0 = exitcond_fu_1631_p2)))) then 
                i_op_assign_s_reg_286 <= i_reg_2385;
            end if; 
        end if;
    end process;

    op_assign_s_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50) and not((exitcond1_fu_1611_p2 = ap_const_lv1_0)))) then 
                op_assign_s_reg_275 <= c_reg_2372;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state48))) then 
                op_assign_s_reg_275 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul8_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond4_fu_1591_p2))) then 
                phi_mul8_reg_297 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state51) and not((ap_const_lv1_0 = exitcond_fu_1631_p2)))) then 
                phi_mul8_reg_297 <= next_mul9_reg_2377;
            end if; 
        end if;
    end process;

    phi_mul_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50) and (exitcond1_fu_1611_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_320 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state107) and not((gmem_BVALID = ap_const_logic_0)))) then 
                phi_mul_reg_320 <= next_mul_reg_2395;
            end if; 
        end if;
    end process;

    sum_3_be_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_lv1_1 = ap_CS_fsm_state66))) then 
                sum_3_be_reg_376 <= sum_3_feature_in_loa_fu_1807_p3;
            elsif (((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state66))) then 
                sum_3_be_reg_376 <= feature_in_load_1_su_fu_1898_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = exitcond3_fu_1677_p2) and (mode_V_read_reg_1974 = ap_const_lv2_3))) then 
                sum_3_be_reg_376 <= sum_3_reg_353;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state81))) then 
                sum_3_be_reg_376 <= sum_2_reg_2501;
            end if; 
        end if;
    end process;

    sum_3_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state82))) then 
                sum_3_reg_353 <= sum_3_be_reg_376;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
                sum_3_reg_353 <= i_op_assign_1_reg_332;
            end if; 
        end if;
    end process;

    sum_5_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52) and (tmp_37_reg_2344 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond2_fu_1642_p2)))) then 
                sum_5_reg_392 <= i_op_assign_1_reg_332;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state97) and not((tmp_37_reg_2344 = ap_const_lv1_0)))) then 
                sum_5_reg_392 <= grp_fu_409_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                CHin_V_read_reg_1998 <= CHin_V;
                Kx_V_read_reg_1986 <= Kx_V;
                Ky_V_read_reg_1980 <= Ky_V;
                Win_V_read_reg_1993 <= Win_V;
                feature_in1_reg_2009 <= feature_in(31 downto 2);
                feature_out3_reg_2004 <= feature_out(31 downto 2);
                mode_V_read_reg_1974 <= mode_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state45))) then
                F2_reg_2146 <= F2_fu_775_p2;
                QUAN_INC_reg_2155 <= QUAN_INC_fu_791_p2;
                isneg_reg_2118 <= ireg_V_fu_711_p1(63 downto 63);
                man_V_1_reg_2133 <= man_V_1_fu_763_p2;
                    p_Result_17_reg_2128(51 downto 0) <= p_Result_17_fu_759_p1(51 downto 0);
                sh_amt_reg_2160 <= sh_amt_fu_809_p3;
                tmp_10_reg_2138 <= tmp_10_fu_769_p2;
                tmp_21_reg_2167 <= tmp_21_fu_817_p2;
                tmp_78_reg_2172 <= tmp_24_fu_831_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state46))) then
                Range1_all_ones_1_reg_2249 <= Range1_all_ones_1_fu_1037_p2;
                Range1_all_zeros_1_reg_2277 <= Range1_all_zeros_1_fu_1091_p2;
                Range2_all_ones_reg_2267 <= Range2_all_ones_fu_1073_p2;
                icmp_reg_2224 <= icmp_fu_974_p2;
                p_Val2_6_reg_2199 <= p_Val2_6_fu_938_p2;
                pos1_reg_2230 <= pos1_fu_979_p2;
                rev_reg_2242 <= rev_fu_1011_p2;
                sel_tmp11_reg_2282 <= sel_tmp11_fu_1109_p2;
                sel_tmp2_reg_2211 <= sel_tmp2_fu_958_p2;
                sel_tmp6_reg_2217 <= sel_tmp6_fu_968_p2;
                sh_amt_cast_reg_2177 <= sh_amt_cast_fu_852_p1;
                tmp_13_reg_2182 <= tmp_13_fu_855_p2;
                tmp_25_reg_2235 <= tmp_25_fu_997_p2;
                tmp_29_reg_2261 <= tmp_29_fu_1051_p2;
                tmp_31_reg_2272 <= tmp_31_fu_1079_p2;
                tmp_59_reg_2187 <= tmp_59_fu_860_p1;
                tmp_76_reg_2193 <= p_Val2_5_fu_895_p3(2 downto 2);
                tmp_77_reg_2205 <= p_Val2_6_fu_938_p2(2 downto 2);
                tmp_82_reg_2256 <= pos2_fu_988_p2(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state48))) then
                Wout_V_reg_2325 <= Wout_V_fu_1544_p1;
                    p_sum_reg_2353(5 downto 2) <= p_sum_fu_1579_p3(5 downto 2);    p_sum_reg_2353(7) <= p_sum_fu_1579_p3(7);    p_sum_reg_2353(9) <= p_sum_fu_1579_p3(9);    p_sum_reg_2353(13) <= p_sum_fu_1579_p3(13);    p_sum_reg_2353(16 downto 15) <= p_sum_fu_1579_p3(16 downto 15);    p_sum_reg_2353(21 downto 20) <= p_sum_fu_1579_p3(21 downto 20);    p_sum_reg_2353(25 downto 23) <= p_sum_fu_1579_p3(25 downto 23);    p_sum_reg_2353(28 downto 27) <= p_sum_fu_1579_p3(28 downto 27);    p_sum_reg_2353(31 downto 30) <= p_sum_fu_1579_p3(31 downto 30);
                    rhs_V_1_reg_2336(15 downto 0) <= rhs_V_1_fu_1552_p1(15 downto 0);
                tmp48_reg_2358 <= tmp48_fu_1943_p2;
                    tmp_14_reg_2318(29 downto 0) <= tmp_14_fu_1406_p1(29 downto 0);
                    tmp_36_reg_2331(15 downto 0) <= tmp_36_fu_1548_p1(15 downto 0);
                tmp_37_reg_2344 <= tmp_37_fu_1555_p2;
                tmp_40_reg_2348 <= grp_fu_414_p1;
                    tmp_8_reg_2313(29 downto 0) <= tmp_8_fu_1403_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then
                brmerge121_demorgan_s_reg_2307 <= brmerge121_demorgan_s_fu_1397_p2;
                overflow_reg_2301 <= overflow_fu_1391_p2;
                p_Val2_7_reg_2288 <= p_Val2_7_fu_1161_p3;
                sign_assign_reg_2295 <= sign_assign_fu_1361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then
                c_reg_2372 <= c_fu_1596_p2;
                    i_op_assign_18_cast_reg_2363(15 downto 0) <= i_op_assign_18_cast_fu_1587_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state56))) then
                feature_in2_sum5_reg_2453 <= feature_in2_sum5_fu_1708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state67))) then
                feature_in2_sum6_reg_2490 <= feature_in2_sum6_fu_1909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_lv1_1 = ap_CS_fsm_state56))) then
                feature_in2_sum_reg_2448 <= feature_in2_sum_fu_1701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state100))) then
                feature_out4_sum_reg_2521 <= feature_out4_sum_fu_1932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then
                    i_op_assign_16_cast_reg_2400(15 downto 0) <= i_op_assign_16_cast_fu_1627_p1(15 downto 0);
                j_reg_2408 <= j_fu_1636_p2;
                next_mul_reg_2395 <= next_mul_fu_1622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then
                i_op_assign_reg_2035 <= grp_fu_431_p1;
                tmp_3_reg_2040 <= grp_fu_434_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50))) then
                i_reg_2385 <= i_fu_1616_p2;
                next_mul9_reg_2377 <= next_mul9_fu_1602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52))) then
                ii_reg_2416 <= ii_fu_1647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then
                jj_reg_2436 <= jj_fu_1682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then
                    lhs_V_reg_2055(7 downto 0) <= lhs_V_fu_484_p1(7 downto 0);
                r_V_5_reg_2060 <= r_V_5_fu_487_p2;
                    rhs_V_reg_2050(7 downto 0) <= rhs_V_fu_481_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then
                loc_V_1_reg_2082 <= loc_V_1_fu_515_p1;
                loc_V_reg_2074 <= p_Val2_s_fu_493_p1(62 downto 52);
                p_Result_s_reg_2065 <= p_Val2_s_fu_493_p1(63 downto 63);
                tmp_27_reg_2093 <= tmp_27_fu_534_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50) and (exitcond1_fu_1611_p2 = ap_const_lv1_0))) then
                p_4_reg_2390 <= p_4_fu_1948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state37)) or ((ap_const_lv1_1 = ap_CS_fsm_state42)))) then
                reg_437 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state64) and (mode_V_read_reg_1974 = ap_const_lv2_2) and not((ap_condition_391 = ap_const_boolean_1))) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_condition_391 = ap_const_boolean_1))) or ((ap_const_lv1_1 = ap_CS_fsm_state75) and not((gmem_RVALID = ap_const_logic_0))))) then
                reg_442 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then
                sel_tmp6_i_reg_2113 <= sel_tmp6_i_fu_686_p3;
                tmp_3_i_reg_2108 <= tmp_3_i_fu_547_p2;
                tmp_i_reg_2103 <= tmp_i_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state80))) then
                sum_2_reg_2501 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state99))) then
                tmp1_reg_2516 <= grp_fu_1923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then
                tmp_45_reg_2426 <= tmp_45_fu_1672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state65))) then
                tmp_56_reg_2475 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_lv1_1 = ap_CS_fsm_state65))) then
                tmp_66_reg_2470 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                tmp_6_reg_2019 <= grp_fu_431_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state37))) then
                tmp_7_reg_2045 <= grp_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then
                    tmp_s_reg_2024(15 downto 0) <= tmp_s_fu_473_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = exitcond3_fu_1677_p2))) then
                w_V_reg_2441 <= w_V_fu_1692_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_2024(31 downto 16) <= "0000000000000000";
    rhs_V_reg_2050(15 downto 8) <= "00000000";
    lhs_V_reg_2055(15 downto 8) <= "00000000";
    p_Result_17_reg_2128(53 downto 52) <= "01";
    tmp_8_reg_2313(31 downto 30) <= "00";
    tmp_14_reg_2318(31 downto 30) <= "00";
    tmp_36_reg_2331(31 downto 16) <= "0000000000000000";
    rhs_V_1_reg_2336(31 downto 16) <= "0000000000000000";
    p_sum_reg_2353(1 downto 0) <= "00";
    p_sum_reg_2353(6 downto 6) <= "0";
    p_sum_reg_2353(8 downto 8) <= "0";
    p_sum_reg_2353(12 downto 10) <= "000";
    p_sum_reg_2353(14 downto 14) <= "0";
    p_sum_reg_2353(19 downto 17) <= "000";
    p_sum_reg_2353(22 downto 22) <= "0";
    p_sum_reg_2353(26 downto 26) <= "0";
    p_sum_reg_2353(29) <= '0';
    i_op_assign_18_cast_reg_2363(31 downto 16) <= "0000000000000000";
    i_op_assign_16_cast_reg_2400(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mode_V_read_reg_1974, gmem_RVALID, gmem_BVALID, ap_condition_391, tmp_37_reg_2344, exitcond1_fu_1611_p2, exitcond2_fu_1642_p2, exitcond3_fu_1677_p2, ap_sig_ioackin_gmem_ARREADY, ap_sig_ioackin_gmem_AWREADY, exitcond_fu_1631_p2, exitcond4_fu_1591_p2, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_1591_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                if (not((exitcond1_fu_1611_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                if (not((ap_const_lv1_0 = exitcond_fu_1631_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((tmp_37_reg_2344 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond2_fu_1642_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                elsif ((not((tmp_37_reg_2344 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond2_fu_1642_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_1677_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                elsif (((ap_const_lv1_0 = exitcond3_fu_1677_p2) and (mode_V_read_reg_1974 = ap_const_lv2_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                elsif (((ap_const_lv1_0 = exitcond3_fu_1677_p2) and (mode_V_read_reg_1974 = ap_const_lv2_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if ((not((((mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) and ((mode_V_read_reg_1974 = ap_const_lv2_1) or (mode_V_read_reg_1974 = ap_const_lv2_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if ((not((ap_condition_391 = ap_const_boolean_1)) and ((mode_V_read_reg_1974 = ap_const_lv2_1) or (mode_V_read_reg_1974 = ap_const_lv2_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_775_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_9_fu_737_p1));
    QUAN_INC_fu_791_p2 <= "1" when (signed(tmp_57_fu_781_p4) > signed(ap_const_lv11_0)) else "0";
    Range1_all_ones_1_fu_1037_p2 <= (tmp10_fu_1031_p2 and tmp_25_fu_997_p2);
    Range1_all_ones_2_i_41_fu_1323_p2 <= (carry_1_i_fu_1178_p2 and Range1_all_ones_2_i_fu_1237_p3);
    Range1_all_ones_2_i_fu_1237_p3 <= 
        Range1_all_ones_fu_1213_p2 when (or_cond117_i_fu_1209_p2(0) = '1') else 
        sel_tmp12_fu_1232_p3;
    Range1_all_ones_2_mu_fu_1296_p2 <= (Range1_all_ones_2_i_fu_1237_p3 and carry_1_not_i_fu_1279_p2);
    Range1_all_ones_fu_1213_p2 <= (Range2_all_ones_1_i_fu_1202_p3 and Range1_all_ones_1_reg_2249);
    Range1_all_zeros_1_fu_1091_p2 <= "1" when (p_Val2_16_fu_847_p3 = ap_const_lv54_0) else "0";
    Range1_all_zeros_2_i_fu_1252_p3 <= 
        p_122_i_fu_1223_p2 when (or_cond117_i_fu_1209_p2(0) = '1') else 
        sel_tmp13_fu_1245_p3;
    Range1_all_zeros_fu_1218_p2 <= (Range1_all_ones_1_reg_2249 xor ap_const_lv1_1);
    Range2_V_1_fu_1061_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_16_fu_847_p3),to_integer(unsigned('0' & tmp_30_fu_1057_p1(31-1 downto 0)))));
    Range2_all_ones_1_i_fu_1202_p3 <= 
        Range2_all_ones_reg_2267 when (or_cond115_i_fu_1197_p2(0) = '1') else 
        rev1_fu_1192_p2;
    Range2_all_ones_1_no_fu_1284_p2 <= (Range2_all_ones_1_i_fu_1202_p3 xor ap_const_lv1_1);
    Range2_all_ones_fu_1073_p2 <= "1" when (Range2_V_1_fu_1061_p2 = r_V_fu_1067_p2) else "0";
        Wout_V_fu_1544_p1 <= std_logic_vector(resize(signed(p_1_fu_1536_p3),16));

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99 downto 99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100 downto 100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101 downto 101);
    ap_CS_fsm_state107 <= ap_CS_fsm(106 downto 106);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36 downto 36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37 downto 37);
    ap_CS_fsm_state42 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43 downto 43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44 downto 44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45 downto 45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46 downto 46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47 downto 47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51 downto 51);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55 downto 55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56 downto 56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state64 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66 downto 66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67 downto 67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state75 <= ap_CS_fsm(74 downto 74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75 downto 75);
    ap_CS_fsm_state80 <= ap_CS_fsm(79 downto 79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80 downto 80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81 downto 81);
    ap_CS_fsm_state97 <= ap_CS_fsm(96 downto 96);
    ap_CS_fsm_state99 <= ap_CS_fsm(98 downto 98);

    ap_condition_391_assign_proc : process(mode_V_read_reg_1974, gmem_RVALID)
    begin
                ap_condition_391 <= (((mode_V_read_reg_1974 = ap_const_lv2_2) and (gmem_RVALID = ap_const_logic_0)) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state49, exitcond4_fu_1591_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49) and not((ap_const_lv1_0 = exitcond4_fu_1591_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state49, exitcond4_fu_1591_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49) and not((ap_const_lv1_0 = exitcond4_fu_1591_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    brmerge121_demorgan_s_fu_1397_p2 <= (newsignbit_fu_1184_p3 and deleted_ones_0_i_fu_1340_p2);
    brmerge121_i_fu_1409_p2 <= (brmerge121_demorgan_s_reg_2307 xor ap_const_lv1_1);
    brmerge123_i_fu_1290_p2 <= (carry_1_not_i_fu_1279_p2 or Range2_all_ones_1_no_fu_1284_p2);
    brmerge_fu_1434_p2 <= (tmp13_fu_1429_p2 or brmerge121_demorgan_s_reg_2307);
    brmerge_i_fu_1380_p2 <= (newsignbit_fu_1184_p3 or deleted_zeros_0_not_s_fu_1375_p2);
    brmerge_i_i_fu_1419_p2 <= (underflow_fu_1414_p2 or overflow_reg_2301);
    c_fu_1596_p2 <= std_logic_vector(unsigned(op_assign_s_reg_275) + unsigned(ap_const_lv16_1));
    carry_1_i_fu_1178_p2 <= (sel_tmp3_fu_1133_p2 and tmp9_fu_1172_p2);
    carry_1_not_i_fu_1279_p2 <= (tmp11_fu_1274_p2 or tmp_77_reg_2205);
    deleted_ones_0_i_fu_1340_p2 <= (deleted_ones_fu_1315_p3 or sel_tmp14_fu_1335_p2);
    deleted_ones_fu_1315_p3 <= 
        Range1_all_ones_2_mu_fu_1296_p2 when (brmerge123_i_fu_1290_p2(0) = '1') else 
        p_120_i_fu_1309_p2;
    deleted_zeros_0_not_s_fu_1375_p2 <= (tmp_25_reg_2235 and deleted_zeros_not_fu_1369_p2);
    deleted_zeros_fu_1260_p3 <= 
        Range1_all_ones_2_i_fu_1237_p3 when (carry_1_i_fu_1178_p2(0) = '1') else 
        Range1_all_zeros_2_i_fu_1252_p3;
    deleted_zeros_not_fu_1369_p2 <= (deleted_zeros_fu_1260_p3 xor ap_const_lv1_1);
    exitcond1_fu_1611_p2 <= "1" when (i_op_assign_s_reg_286 = Wout_V_reg_2325) else "0";
    exitcond2_fu_1642_p2 <= "1" when (i_op_assign_3_reg_342 = Ky_V_read_reg_1980) else "0";
    exitcond3_fu_1677_p2 <= "1" when (i_op_assign_4_reg_365 = Kx_V_read_reg_1986) else "0";
    exitcond4_fu_1591_p2 <= "1" when (op_assign_s_reg_275 = CHin_V_read_reg_1998) else "0";
    exitcond_fu_1631_p2 <= "1" when (i_op_assign_2_reg_309 = Wout_V_reg_2325) else "0";
    exp_V_fu_741_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_9_fu_737_p1));
    exp_tmp_V_fu_727_p4 <= ireg_V_fu_711_p1(62 downto 52);
    feature_in2_sum5_fu_1708_p2 <= std_logic_vector(signed(grp_fu_1960_p3) + signed(tmp_14_reg_2318));
    feature_in2_sum6_fu_1909_p2 <= std_logic_vector(unsigned(tmp_14_reg_2318) + unsigned(grp_fu_1967_p3));
    feature_in2_sum_fu_1701_p2 <= std_logic_vector(signed(grp_fu_1953_p3) + signed(tmp_14_reg_2318));
    feature_in_load_1_su_fu_1898_p3 <= 
        reg_442 when (tmp_58_fu_1893_p2(0) = '1') else 
        sum_3_reg_353;
    feature_in_load_1_to_fu_1833_p1 <= reg_442;
    feature_in_load_2_to_fu_1742_p1 <= reg_442;
    feature_out4_sum_fu_1932_p2 <= std_logic_vector(unsigned(tmp_8_reg_2313) + unsigned(tmp_46_fu_1928_p2));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state68, ap_CS_fsm_state57, mode_V_read_reg_1974, feature_in2_sum_reg_2448, feature_in2_sum5_reg_2453, feature_in2_sum6_reg_2490, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state68)) then 
                gmem_ARADDR <= feature_in2_sum6_reg_2490;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_1))) then 
                gmem_ARADDR <= feature_in2_sum5_reg_2453;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_2))) then 
                gmem_ARADDR <= feature_in2_sum_reg_2448;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state68, ap_CS_fsm_state57, mode_V_read_reg_1974, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state68) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state101, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state101) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state107, gmem_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state107) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state75, mode_V_read_reg_1974, ap_CS_fsm_state64, gmem_RVALID, ap_condition_391)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state64) and (mode_V_read_reg_1974 = ap_const_lv2_2) and not((ap_condition_391 = ap_const_boolean_1))) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_condition_391 = ap_const_boolean_1))) or ((ap_const_lv1_1 = ap_CS_fsm_state75) and not((gmem_RVALID = ap_const_logic_0))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state102, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state102) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state68, ap_CS_fsm_state57, mode_V_read_reg_1974)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state68)) or ((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state57) and (mode_V_read_reg_1974 = ap_const_lv2_2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state101)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state101))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state107)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state107))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state75, mode_V_read_reg_1974, ap_CS_fsm_state64)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state75)) or ((mode_V_read_reg_1974 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state64)) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (mode_V_read_reg_1974 = ap_const_lv2_2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state102)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state102))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1923_p0 <= std_logic_vector(unsigned(p_4_reg_2390) + unsigned(i_op_assign_16_cast_reg_2400));
    grp_fu_1923_p1 <= rhs_V_1_reg_2336(16 - 1 downto 0);
    grp_fu_1953_p1 <= rhs_V_1_reg_2336(16 - 1 downto 0);
    grp_fu_1960_p1 <= rhs_V_1_reg_2336(16 - 1 downto 0);
    grp_fu_1967_p1 <= rhs_V_1_reg_2336(16 - 1 downto 0);
    grp_fu_414_p0 <= std_logic_vector(resize(unsigned(r_V_5_reg_2060),32));

    grp_fu_422_opcode_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state33))) then 
            grp_fu_422_opcode <= ap_const_lv2_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state38))) then 
            grp_fu_422_opcode <= ap_const_lv2_0;
        else 
            grp_fu_422_opcode <= "XX";
        end if; 
    end process;


    grp_fu_422_p0_assign_proc : process(reg_437, i_op_assign_reg_2035, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then 
            grp_fu_422_p0 <= reg_437;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state33))) then 
            grp_fu_422_p0 <= i_op_assign_reg_2035;
        else 
            grp_fu_422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_p1_assign_proc : process(tmp_3_reg_2040, tmp_7_reg_2045, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then 
            grp_fu_422_p1 <= tmp_7_reg_2045;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state33))) then 
            grp_fu_422_p1 <= tmp_3_reg_2040;
        else 
            grp_fu_422_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(ap_CS_fsm_state1, tmp_5_fu_468_p1, tmp_s_fu_473_p1, ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            grp_fu_431_p0 <= tmp_s_fu_473_p1;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_431_p0 <= tmp_5_fu_468_p1;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_434_p0 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1986),32));
    h_V_fu_1657_p2 <= std_logic_vector(unsigned(tmp_43_fu_1653_p1) + unsigned(phi_mul8_reg_297));
    i_fu_1616_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_286) + unsigned(ap_const_lv16_1));
    i_op_assign_16_cast_fu_1627_p1 <= std_logic_vector(resize(unsigned(i_op_assign_2_reg_309),32));
    i_op_assign_18_cast_fu_1587_p1 <= std_logic_vector(resize(unsigned(op_assign_s_reg_275),32));
    icmp_fu_974_p2 <= "1" when (signed(tmp_78_reg_2172) > signed(ap_const_lv11_0)) else "0";
    ii_fu_1647_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_342) + unsigned(ap_const_lv8_1));
    index_V_fu_519_p4 <= p_Val2_s_fu_493_p1(57 downto 52);
    ireg_V_fu_711_p1 <= v_assign_fu_704_p3;
    j_fu_1636_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_309) + unsigned(ap_const_lv16_1));
    jj_fu_1682_p2 <= std_logic_vector(unsigned(i_op_assign_4_reg_365) + unsigned(ap_const_lv8_1));
    lD_fu_1027_p1 <= tmp_28_fu_1021_p2(1 - 1 downto 0);
    lhs_V_fu_484_p1 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1986),16));
    loc_V_1_fu_515_p1 <= p_Val2_s_fu_493_p1(52 - 1 downto 0);
    loc_V_2_fu_604_p4 <= p_Val2_8_fu_590_p2(62 downto 52);
    loc_V_3_fu_614_p1 <= p_Val2_8_fu_590_p2(52 - 1 downto 0);
    man_V_1_fu_763_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_17_fu_759_p1));
    mask_i_cast_fu_568_p1 <= std_logic_vector(resize(unsigned(mask_table1_q0),64));
    mask_table1_address0 <= tmp_6_i_fu_529_p1(6 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newsignbit_fu_1184_p3 <= p_Val2_7_fu_1161_p3(2 downto 2);
    next_mul9_fu_1602_p2 <= std_logic_vector(unsigned(phi_mul8_reg_297) + unsigned(rhs_V_reg_2050));
    next_mul_fu_1622_p2 <= std_logic_vector(unsigned(phi_mul_reg_320) + unsigned(lhs_V_reg_2055));
    notlhs1_fu_1851_p2 <= "0" when (tmp_51_fu_1819_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_1869_p2 <= "0" when (tmp_52_fu_1837_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_1778_p2 <= "0" when (tmp_62_fu_1746_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1760_p2 <= "0" when (tmp_61_fu_1728_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_1857_p2 <= "1" when (tmp_86_fu_1829_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_1875_p2 <= "1" when (tmp_87_fu_1847_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_1784_p2 <= "1" when (tmp_89_fu_1756_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1766_p2 <= "1" when (tmp_88_fu_1738_p1 = ap_const_lv23_0) else "0";
    or_cond115_i_fu_1197_p2 <= (tmp_29_reg_2261 and rev1_fu_1192_p2);
    or_cond117_i_fu_1209_p2 <= (tmp_29_reg_2261 and rev_reg_2242);
    or_cond_i_fu_562_p2 <= (tmp_4_i_fu_552_p2 and tmp_9_i_fu_557_p2);
    overflow_fu_1391_p2 <= (brmerge_i_fu_1380_p2 and tmp_34_fu_1386_p2);
    p_119_i_fu_1228_p2 <= (Range1_all_zeros_1_reg_2277 or rev_reg_2242);
    p_120_i_fu_1309_p2 <= (tmp_83_fu_1302_p3 or Range1_all_zeros_fu_1218_p2);
    p_122_i_fu_1223_p2 <= (tmp_31_reg_2272 and Range1_all_zeros_fu_1218_p2);
    p_1_fu_1536_p3 <= 
        p_s_fu_1528_p3 when (tmp_84_fu_1510_p3(0) = '1') else 
        ret_V_fu_1500_p4;
    p_4_fu_1948_p0 <= p_4_fu_1948_p00(16 - 1 downto 0);
    p_4_fu_1948_p00 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_286),32));
    p_4_fu_1948_p1 <= tmp_36_reg_2331(16 - 1 downto 0);
    p_5_fu_888_p3 <= 
        ap_const_lv3_7 when (isneg_reg_2118(0) = '1') else 
        ap_const_lv3_0;
    p_Result_13_fu_572_p3 <= (p_Result_s_reg_2065 & ap_const_lv63_0);
    p_Result_14_fu_583_p3 <= (ap_const_lv1_0 & tmp_27_reg_2093);
    p_Result_15_fu_596_p3 <= p_Val2_8_fu_590_p2(63 downto 63);
    p_Result_16_fu_647_p4 <= ((xs_sign_V_fu_624_p2 & xs_exp_V_fu_618_p3) & xs_sig_V_fu_641_p2);
    p_Result_17_fu_759_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_751_p3),54));
    p_Val2_12_mux_fu_1439_p3 <= 
        ap_const_lv3_3 when (brmerge_i_i_fu_1419_p2(0) = '1') else 
        p_Val2_7_reg_2288;
    p_Val2_16_fu_847_p3 <= 
        man_V_1_reg_2133 when (isneg_reg_2118(0) = '1') else 
        p_Result_17_reg_2128;
    p_Val2_5_fu_895_p3 <= 
        tmp_67_fu_884_p1 when (tmp_15_fu_864_p2(0) = '1') else 
        p_5_fu_888_p3;
    p_Val2_6_fu_938_p2 <= std_logic_vector(unsigned(tmp_23_fu_934_p1) + unsigned(p_Val2_5_fu_895_p3));
    p_Val2_7_fu_1161_p3 <= 
        tmp_69_fu_1123_p1 when (sel_tmp6_reg_2217(0) = '1') else 
        sel_tmp9_fu_1154_p3;
    p_Val2_8_fu_590_p2 <= std_logic_vector(unsigned(p_Result_14_fu_583_p3) + unsigned(mask_i_cast_fu_568_p1));
    p_Val2_s_42_fu_1446_p3 <= 
        ap_const_lv3_0 when (tmp_10_reg_2138(0) = '1') else 
        ap_const_lv3_4;
    p_Val2_s_fu_493_p1 <= reg_437;
    p_s_fu_1528_p3 <= 
        ret_V_1_fu_1522_p2 when (tmp_85_fu_1518_p1(0) = '1') else 
        ret_V_fu_1500_p4;
    p_sum_fu_1579_p3 <= 
        sum_fu_1565_p3 when (tmp_42_fu_1573_p2(0) = '1') else 
        ap_const_lv32_DBB1A2BC;
        pos1_cast_fu_984_p1 <= std_logic_vector(resize(signed(pos1_fu_979_p2),32));

    pos1_fu_979_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(F2_reg_2146));
        pos2_cast_fu_993_p1 <= std_logic_vector(resize(signed(pos2_fu_988_p2),32));

    pos2_fu_988_p2 <= std_logic_vector(unsigned(ap_const_lv12_3) + unsigned(F2_reg_2146));
    qb_fu_920_p3 <= 
        isneg_reg_2118 when (tmp_21_reg_2167(0) = '1') else 
        tmp_75_fu_912_p3;
    r_V_5_fu_487_p0 <= r_V_5_fu_487_p00(8 - 1 downto 0);
    r_V_5_fu_487_p00 <= std_logic_vector(resize(unsigned(Ky_V_read_reg_1980),16));
    r_V_5_fu_487_p1 <= r_V_5_fu_487_p10(8 - 1 downto 0);
    r_V_5_fu_487_p10 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1986),16));
    r_V_5_fu_487_p2 <= std_logic_vector(resize(unsigned(r_V_5_fu_487_p0) * unsigned(r_V_5_fu_487_p1), 16));
    r_V_fu_1067_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_30_fu_1057_p1(31-1 downto 0)))));
    ret_V_1_fu_1522_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ret_V_fu_1500_p4));
    ret_V_fu_1500_p4 <= wout_V_fu_1492_p3(2 downto 1);
    ret_i_i_i_fu_657_p1 <= p_Result_16_fu_647_p4;
    ret_i_i_i_i_fu_579_p1 <= p_Result_13_fu_572_p3;
    rev1_fu_1192_p2 <= (tmp_82_reg_2256 xor ap_const_lv1_1);
    rev_fu_1011_p2 <= (tmp_80_fu_1003_p3 xor ap_const_lv1_1);
    rhs_V_1_fu_1552_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1998),32));
    rhs_V_fu_481_p1 <= std_logic_vector(resize(unsigned(Ky_V_read_reg_1980),16));
    sel_tmp10_fu_1103_p2 <= (tmp_80_fu_1003_p3 or tmp_33_not_fu_1097_p2);
    sel_tmp11_fu_1109_p2 <= (tmp_32_fu_1085_p2 and sel_tmp10_fu_1103_p2);
    sel_tmp12_fu_1232_p3 <= 
        Range1_all_ones_1_reg_2249 when (sel_tmp11_reg_2282(0) = '1') else 
        rev_reg_2242;
    sel_tmp13_fu_1245_p3 <= 
        Range1_all_zeros_fu_1218_p2 when (sel_tmp11_reg_2282(0) = '1') else 
        p_119_i_fu_1228_p2;
    sel_tmp14_fu_1335_p2 <= (tmp_25_reg_2235 xor ap_const_lv1_1);
    sel_tmp15_fu_1352_p2 <= (tmp12_fu_1346_p2 and isneg_reg_2118);
    sel_tmp16_fu_1357_p2 <= (tmp_25_reg_2235 and isneg_reg_2118);
    sel_tmp17_fu_1458_p3 <= 
        p_Val2_s_42_fu_1446_p3 when (tmp_35_fu_1453_p2(0) = '1') else 
        p_Val2_7_reg_2288;
    sel_tmp18_fu_1469_p3 <= 
        sel_tmp17_fu_1458_p3 when (sel_tmp57_demorgan_fu_1465_p2(0) = '1') else 
        p_Val2_7_reg_2288;
    sel_tmp18_not_fu_1268_p2 <= (sel_tmp3_fu_1133_p2 xor ap_const_lv1_1);
    sel_tmp19_fu_1476_p2 <= (tmp_10_reg_2138 xor ap_const_lv1_1);
    sel_tmp1_fu_952_p2 <= (tmp_13_fu_855_p2 xor ap_const_lv1_1);
    sel_tmp1_i_fu_666_p2 <= (sel_tmp_i_fu_661_p2 and tmp_i_fu_542_p2);
    sel_tmp20_fu_1487_p2 <= (tmp37_fu_1481_p2 and icmp_reg_2224);
    sel_tmp2_fu_958_p2 <= (QUAN_INC_reg_2155 and sel_tmp1_fu_952_p2);
    sel_tmp2_i_fu_672_p3 <= 
        ret_i_i_i_i_fu_579_p1 when (sel_tmp1_i_fu_666_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    sel_tmp3_fu_1133_p2 <= (sel_tmp2_reg_2211 and tmp_76_reg_2193);
    sel_tmp4_fu_1137_p3 <= 
        p_Val2_6_reg_2199 when (sel_tmp3_fu_1133_p2(0) = '1') else 
        sel_tmp_fu_1127_p3;
    sel_tmp57_demorgan_fu_1465_p2 <= (tmp_10_reg_2138 or icmp_reg_2224);
    sel_tmp5_demorgan_i_fu_680_p2 <= (tmp_i_fu_542_p2 or tmp_3_i_fu_547_p2);
    sel_tmp5_fu_963_p2 <= "1" when (signed(F2_reg_2146) < signed(ap_const_lv12_1)) else "0";
    sel_tmp6_fu_968_p2 <= (sel_tmp5_fu_963_p2 and tmp_16_fu_869_p2);
    sel_tmp6_i_fu_686_p3 <= 
        sel_tmp2_i_fu_672_p3 when (sel_tmp5_demorgan_i_fu_680_p2(0) = '1') else 
        ret_i_i_i_fu_657_p1;
    sel_tmp7_fu_1144_p2 <= (tmp_76_reg_2193 xor ap_const_lv1_1);
    sel_tmp7_i_fu_694_p2 <= (tmp_i_reg_2103 xor ap_const_lv1_1);
    sel_tmp8_fu_1149_p2 <= (sel_tmp2_reg_2211 and sel_tmp7_fu_1144_p2);
    sel_tmp8_i_fu_699_p2 <= (tmp_3_i_reg_2108 and sel_tmp7_i_fu_694_p2);
    sel_tmp9_fu_1154_p3 <= 
        p_Val2_6_reg_2199 when (sel_tmp8_fu_1149_p2(0) = '1') else 
        sel_tmp4_fu_1137_p3;
    sel_tmp_fu_1127_p3 <= 
        tmp_59_reg_2187 when (tmp_13_reg_2182(0) = '1') else 
        ap_const_lv3_0;
    sel_tmp_i_fu_661_p2 <= (p_Result_s_reg_2065 or or_cond_i_fu_562_p2);
        sh_amt_cast_fu_852_p1 <= std_logic_vector(resize(signed(sh_amt_reg_2160),32));

    sh_amt_fu_809_p3 <= 
        tmp_11_fu_797_p2 when (QUAN_INC_fu_791_p2(0) = '1') else 
        tmp_12_fu_803_p2;
    sign_assign_fu_1361_p3 <= 
        tmp_33_fu_1329_p2 when (sel_tmp16_fu_1357_p2(0) = '1') else 
        sel_tmp15_fu_1352_p2;
    sign_assign_not_fu_1424_p2 <= (sign_assign_reg_2295 xor ap_const_lv1_1);
    sum_3_feature_in_loa_fu_1807_p3 <= 
        sum_3_reg_353 when (tmp_68_fu_1802_p2(0) = '1') else 
        reg_442;
    sum_3_to_int1_fu_1724_p1 <= sum_3_reg_353;
    sum_3_to_int_fu_1815_p1 <= sum_3_reg_353;
    sum_fu_1565_p3 <= 
        ap_const_lv32_0 when (tmp_37_fu_1555_p2(0) = '1') else 
        ap_const_lv32_5BB1A2BC;
    tmp10_fu_1031_p2 <= (lD_fu_1027_p1 and rev_fu_1011_p2);
    tmp11_fu_1274_p2 <= (sel_tmp6_reg_2217 or sel_tmp18_not_fu_1268_p2);
    tmp12_fu_1346_p2 <= (newsignbit_fu_1184_p3 and sel_tmp14_fu_1335_p2);
    tmp13_fu_1429_p2 <= (overflow_reg_2301 or sign_assign_not_fu_1424_p2);
    tmp37_fu_1481_p2 <= (brmerge_fu_1434_p2 and sel_tmp19_fu_1476_p2);
    tmp48_fu_1943_p0 <= tmp_s_reg_2024(16 - 1 downto 0);
    tmp48_fu_1943_p1 <= tmp48_fu_1943_p10(16 - 1 downto 0);
    tmp48_fu_1943_p10 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1998),32));
    tmp66_demorgan_fu_1168_p2 <= (tmp_77_reg_2205 or sel_tmp6_reg_2217);
    tmp67_cast_cast_fu_823_p3 <= 
        ap_const_lv12_2 when (QUAN_INC_fu_791_p2(0) = '1') else 
        ap_const_lv12_1;
    tmp9_fu_1172_p2 <= (tmp66_demorgan_fu_1168_p2 xor ap_const_lv1_1);
    tmp_10_fu_769_p2 <= "1" when (tmp_38_fu_715_p1 = ap_const_lv63_0) else "0";
    tmp_11_fu_797_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(F2_fu_775_p2));
    tmp_12_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) - unsigned(F2_fu_775_p2));
    tmp_13_fu_855_p2 <= "1" when (F2_reg_2146 = ap_const_lv12_1) else "0";
    tmp_14_fu_1406_p1 <= std_logic_vector(resize(unsigned(feature_in1_reg_2009),32));
    tmp_15_fu_864_p2 <= "1" when (unsigned(sh_amt_reg_2160) < unsigned(ap_const_lv12_36)) else "0";
    tmp_16_fu_869_p2 <= "1" when (unsigned(sh_amt_reg_2160) < unsigned(ap_const_lv12_3)) else "0";
    tmp_17_fu_874_p1 <= std_logic_vector(resize(unsigned(sh_amt_cast_fu_852_p1),54));
    tmp_18_fu_878_p2 <= std_logic_vector(shift_right(signed(p_Val2_16_fu_847_p3),to_integer(unsigned('0' & tmp_17_fu_874_p1(31-1 downto 0)))));
        tmp_19_fu_1115_p1 <= std_logic_vector(resize(signed(tmp_59_reg_2187),32));

    tmp_1_fu_751_p3 <= (ap_const_lv1_1 & tmp_48_fu_747_p1);
    tmp_20_fu_1118_p2 <= std_logic_vector(shift_left(unsigned(tmp_19_fu_1115_p1),to_integer(unsigned('0' & sh_amt_cast_reg_2177(31-1 downto 0)))));
    tmp_21_fu_817_p2 <= "1" when (signed(tmp_11_fu_797_p2) > signed(ap_const_lv12_36)) else "0";
    tmp_22_fu_903_p2 <= std_logic_vector(signed(ap_const_lv12_FFE) + signed(F2_reg_2146));
    tmp_23_fu_934_p1 <= std_logic_vector(resize(unsigned(qb_fu_920_p3),3));
    tmp_24_fu_831_p2 <= std_logic_vector(unsigned(exp_V_fu_741_p2) + unsigned(tmp67_cast_cast_fu_823_p3));
    tmp_25_fu_997_p2 <= "1" when (signed(pos1_fu_979_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_26_fu_1017_p1 <= std_logic_vector(resize(unsigned(pos1_cast_fu_984_p1),54));
        tmp_27_cast_fu_908_p1 <= std_logic_vector(resize(signed(tmp_22_fu_903_p2),32));

    tmp_27_fu_534_p1 <= p_Val2_s_fu_493_p1(63 - 1 downto 0);
    tmp_28_fu_1021_p2 <= std_logic_vector(shift_right(signed(p_Val2_16_fu_847_p3),to_integer(unsigned('0' & tmp_26_fu_1017_p1(31-1 downto 0)))));
    tmp_29_fu_1051_p2 <= "1" when (signed(pos2_fu_988_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_30_fu_1057_p1 <= std_logic_vector(resize(unsigned(pos2_cast_fu_993_p1),54));
    tmp_31_fu_1079_p2 <= "1" when (Range2_V_1_fu_1061_p2 = ap_const_lv54_0) else "0";
    tmp_32_fu_1085_p2 <= "1" when (pos2_fu_988_p2 = ap_const_lv12_36) else "0";
    tmp_33_fu_1329_p2 <= (Range1_all_ones_2_i_41_fu_1323_p2 xor ap_const_lv1_1);
    tmp_33_not_fu_1097_p2 <= (tmp_29_fu_1051_p2 xor ap_const_lv1_1);
    tmp_34_fu_1386_p2 <= (isneg_reg_2118 xor ap_const_lv1_1);
    tmp_35_fu_1453_p2 <= (tmp_10_reg_2138 or underflow_fu_1414_p2);
    tmp_36_fu_1548_p1 <= std_logic_vector(resize(unsigned(Wout_V_fu_1544_p1),32));
    tmp_37_fu_1555_p2 <= "1" when (mode_V_read_reg_1974 = ap_const_lv2_0) else "0";
    tmp_38_fu_715_p1 <= ireg_V_fu_711_p1(63 - 1 downto 0);
    tmp_3_i_fu_547_p2 <= "1" when (unsigned(loc_V_reg_2074) > unsigned(ap_const_lv11_433)) else "0";
    tmp_41_fu_1560_p2 <= "1" when (mode_V_read_reg_1974 = ap_const_lv2_1) else "0";
    tmp_42_fu_1573_p2 <= (tmp_37_fu_1555_p2 or tmp_41_fu_1560_p2);
    tmp_43_fu_1653_p1 <= std_logic_vector(resize(unsigned(i_op_assign_3_reg_342),16));
    tmp_45_fu_1672_p2 <= std_logic_vector(unsigned(grp_fu_1667_p2) + unsigned(i_op_assign_18_cast_reg_2363));
    tmp_46_fu_1928_p2 <= std_logic_vector(unsigned(tmp1_reg_2516) + unsigned(i_op_assign_18_cast_reg_2363));
    tmp_47_fu_1688_p1 <= std_logic_vector(resize(unsigned(i_op_assign_4_reg_365),16));
    tmp_48_fu_747_p1 <= ireg_V_fu_711_p1(52 - 1 downto 0);
    tmp_4_i_fu_552_p2 <= "1" when (loc_V_1_reg_2082 = ap_const_lv52_0) else "0";
    tmp_51_fu_1819_p4 <= sum_3_to_int_fu_1815_p1(30 downto 23);
    tmp_52_fu_1837_p4 <= feature_in_load_1_to_fu_1833_p1(30 downto 23);
    tmp_53_fu_1863_p2 <= (notrhs1_fu_1857_p2 or notlhs1_fu_1851_p2);
    tmp_54_fu_1881_p2 <= (notrhs2_fu_1875_p2 or notlhs2_fu_1869_p2);
    tmp_55_fu_1887_p2 <= (tmp_53_fu_1863_p2 and tmp_54_fu_1881_p2);
    tmp_57_fu_781_p4 <= F2_fu_775_p2(11 downto 1);
    tmp_58_fu_1893_p2 <= (tmp_55_fu_1887_p2 and tmp_56_reg_2475);
    tmp_59_fu_860_p1 <= p_Val2_16_fu_847_p3(3 - 1 downto 0);
    tmp_5_fu_468_p1 <= std_logic_vector(resize(unsigned(Sx_V),32));
    tmp_5_i_fu_635_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    tmp_61_fu_1728_p4 <= sum_3_to_int1_fu_1724_p1(30 downto 23);
    tmp_62_fu_1746_p4 <= feature_in_load_2_to_fu_1742_p1(30 downto 23);
    tmp_63_fu_1772_p2 <= (notrhs_fu_1766_p2 or notlhs_fu_1760_p2);
    tmp_64_fu_1790_p2 <= (notrhs3_fu_1784_p2 or notlhs3_fu_1778_p2);
    tmp_65_fu_1796_p2 <= (tmp_63_fu_1772_p2 and tmp_64_fu_1790_p2);
    tmp_67_fu_884_p1 <= tmp_18_fu_878_p2(3 - 1 downto 0);
    tmp_68_fu_1802_p2 <= (tmp_65_fu_1796_p2 and tmp_66_reg_2470);
    tmp_69_fu_1123_p1 <= tmp_20_fu_1118_p2(3 - 1 downto 0);
    tmp_6_i_fu_529_p1 <= std_logic_vector(resize(unsigned(index_V_fu_519_p4),32));
    tmp_75_fu_912_p3 <= p_Val2_16_fu_847_p3(to_integer(unsigned(tmp_27_cast_fu_908_p1)) downto to_integer(unsigned(tmp_27_cast_fu_908_p1))) when (to_integer(unsigned(tmp_27_cast_fu_908_p1))>= 0 and to_integer(unsigned(tmp_27_cast_fu_908_p1))<=53) else "-";
    tmp_80_fu_1003_p3 <= pos1_fu_979_p2(11 downto 11);
    tmp_83_fu_1302_p3 <= pos1_reg_2230(11 downto 11);
    tmp_84_fu_1510_p3 <= wout_V_fu_1492_p3(2 downto 2);
    tmp_85_fu_1518_p1 <= wout_V_fu_1492_p3(1 - 1 downto 0);
    tmp_86_fu_1829_p1 <= sum_3_to_int_fu_1815_p1(23 - 1 downto 0);
    tmp_87_fu_1847_p1 <= feature_in_load_1_to_fu_1833_p1(23 - 1 downto 0);
    tmp_88_fu_1738_p1 <= sum_3_to_int1_fu_1724_p1(23 - 1 downto 0);
    tmp_89_fu_1756_p1 <= feature_in_load_2_to_fu_1742_p1(23 - 1 downto 0);
    tmp_8_fu_1403_p1 <= std_logic_vector(resize(unsigned(feature_out3_reg_2004),32));
    tmp_9_fu_737_p1 <= std_logic_vector(resize(unsigned(exp_tmp_V_fu_727_p4),12));
    tmp_9_i_fu_557_p2 <= "1" when (loc_V_reg_2074 = ap_const_lv11_0) else "0";
    tmp_i_fu_542_p2 <= "1" when (unsigned(loc_V_reg_2074) < unsigned(ap_const_lv11_3FF)) else "0";
    tmp_s_fu_473_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_1993),32));
    underflow_fu_1414_p2 <= (sign_assign_reg_2295 and brmerge121_i_fu_1409_p2);
    v_assign_fu_704_p3 <= 
        reg_437 when (sel_tmp8_i_fu_699_p2(0) = '1') else 
        sel_tmp6_i_reg_2113;
    w_V_fu_1692_p2 <= std_logic_vector(unsigned(phi_mul_reg_320) + unsigned(tmp_47_fu_1688_p1));
    wout_V_fu_1492_p3 <= 
        p_Val2_12_mux_fu_1439_p3 when (sel_tmp20_fu_1487_p2(0) = '1') else 
        sel_tmp18_fu_1469_p3;
    xs_exp_V_fu_618_p3 <= 
        loc_V_reg_2074 when (p_Result_s_reg_2065(0) = '1') else 
        loc_V_2_fu_604_p4;
    xs_sig_V_1_fu_629_p3 <= 
        loc_V_1_reg_2082 when (p_Result_s_reg_2065(0) = '1') else 
        loc_V_3_fu_614_p1;
    xs_sig_V_fu_641_p2 <= (xs_sig_V_1_fu_629_p3 and tmp_5_i_fu_635_p2);
    xs_sign_V_fu_624_p2 <= (p_Result_s_reg_2065 or p_Result_15_fu_596_p3);
end behav;
