// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Pool,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.820000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=15,HLS_SYN_FF=8452,HLS_SYN_LUT=12077}" *)

module Pool (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 107'b1;
parameter    ap_ST_fsm_state2 = 107'b10;
parameter    ap_ST_fsm_state3 = 107'b100;
parameter    ap_ST_fsm_state4 = 107'b1000;
parameter    ap_ST_fsm_state5 = 107'b10000;
parameter    ap_ST_fsm_state6 = 107'b100000;
parameter    ap_ST_fsm_state7 = 107'b1000000;
parameter    ap_ST_fsm_state8 = 107'b10000000;
parameter    ap_ST_fsm_state9 = 107'b100000000;
parameter    ap_ST_fsm_state10 = 107'b1000000000;
parameter    ap_ST_fsm_state11 = 107'b10000000000;
parameter    ap_ST_fsm_state12 = 107'b100000000000;
parameter    ap_ST_fsm_state13 = 107'b1000000000000;
parameter    ap_ST_fsm_state14 = 107'b10000000000000;
parameter    ap_ST_fsm_state15 = 107'b100000000000000;
parameter    ap_ST_fsm_state16 = 107'b1000000000000000;
parameter    ap_ST_fsm_state17 = 107'b10000000000000000;
parameter    ap_ST_fsm_state18 = 107'b100000000000000000;
parameter    ap_ST_fsm_state19 = 107'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 107'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 107'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 107'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 107'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 107'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 107'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 107'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 107'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 107'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 107'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 107'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 107'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 107'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 107'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 107'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 107'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 107'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 107'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 107'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 107'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 107'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 107'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 107'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 107'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 107'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 107'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 107'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 107'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 107'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 107'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 107'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 107'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 107'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 107'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 107'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 107'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 107'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 107'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 107'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 107'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 107'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 107'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 107'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 107'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 107'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 107'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 107'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 107'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 107'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 107'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state98 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state99 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state100 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state101 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state102 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state103 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state104 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state106 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state107 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_4A = 32'b1001010;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv32_64 = 32'b1100100;
parameter    ap_const_lv32_65 = 32'b1100101;
parameter    ap_const_lv32_6A = 32'b1101010;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_42 = 32'b1000010;
parameter    ap_const_lv32_4F = 32'b1001111;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv32_62 = 32'b1100010;
parameter    ap_const_lv32_63 = 32'b1100011;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_51 = 32'b1010001;
parameter    ap_const_lv32_50 = 32'b1010000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_4B = 32'b1001011;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv64_3FF0000000000000 = 64'b11111111110000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv11_433 = 11'b10000110011;
parameter    ap_const_lv52_0 = 52'b0000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv63_0 = 63'b000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv52_FFFFFFFFFFFFF = 52'b1111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv54_0 = 54'b000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv12_433 = 12'b10000110011;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv12_FFF = 12'b111111111111;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv12_36 = 12'b110110;
parameter    ap_const_lv12_2 = 12'b10;
parameter    ap_const_lv12_3 = 12'b11;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv12_FFE = 12'b111111111110;
parameter    ap_const_lv54_3FFFFFFFFFFFFF = 54'b111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv32_5BB1A2BC = 32'b1011011101100011010001010111100;
parameter    ap_const_lv32_DBB1A2BC = 32'b11011011101100011010001010111100;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (C_M_AXI_GMEM_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1 : 0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1 : 0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1 : 0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1 : 0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1 : 0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1 : 0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1 : 0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1 : 0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1 : 0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1 : 0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [1:0] mode_V;
wire   [31:0] feature_in;
wire   [31:0] feature_out;
wire   [5:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [51:0] mask_table1_q0;
reg    gmem_blk_n_AR;
wire   [0:0] ap_CS_fsm_state68;
reg    gmem_blk_n_R;
wire   [0:0] ap_CS_fsm_state75;
wire   [0:0] ap_CS_fsm_state57;
reg   [1:0] mode_V_read_reg_1974;
wire   [0:0] ap_CS_fsm_state64;
reg    gmem_blk_n_AW;
wire   [0:0] ap_CS_fsm_state101;
reg    gmem_blk_n_W;
wire   [0:0] ap_CS_fsm_state102;
reg    gmem_blk_n_B;
wire   [0:0] ap_CS_fsm_state107;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
wire   [63:0] grp_fu_422_p2;
reg   [63:0] reg_437;
wire   [0:0] ap_CS_fsm_state37;
wire   [0:0] ap_CS_fsm_state42;
reg   [31:0] reg_442;
reg    ap_condition_391;
reg   [7:0] Ky_V_read_reg_1980;
reg   [7:0] Kx_V_read_reg_1986;
reg   [15:0] Win_V_read_reg_1993;
reg   [15:0] CHin_V_read_reg_1998;
reg   [29:0] feature_out3_reg_2004;
reg   [29:0] feature_in1_reg_2009;
wire   [31:0] tmp_5_fu_468_p1;
wire   [63:0] grp_fu_431_p1;
reg   [63:0] tmp_6_reg_2019;
wire   [0:0] ap_CS_fsm_state6;
wire   [31:0] tmp_s_fu_473_p1;
reg   [31:0] tmp_s_reg_2024;
wire   [0:0] ap_CS_fsm_state27;
reg   [63:0] i_op_assign_reg_2035;
wire   [0:0] ap_CS_fsm_state32;
wire   [63:0] grp_fu_434_p1;
reg   [63:0] tmp_3_reg_2040;
wire   [63:0] grp_fu_426_p2;
reg   [63:0] tmp_7_reg_2045;
wire   [15:0] rhs_V_fu_481_p1;
reg   [15:0] rhs_V_reg_2050;
wire   [15:0] lhs_V_fu_484_p1;
reg   [15:0] lhs_V_reg_2055;
wire   [15:0] r_V_5_fu_487_p2;
reg   [15:0] r_V_5_reg_2060;
reg   [0:0] p_Result_s_reg_2065;
wire   [0:0] ap_CS_fsm_state43;
reg   [10:0] loc_V_reg_2074;
wire   [51:0] loc_V_1_fu_515_p1;
reg   [51:0] loc_V_1_reg_2082;
wire   [62:0] tmp_27_fu_534_p1;
reg   [62:0] tmp_27_reg_2093;
wire   [0:0] tmp_i_fu_542_p2;
reg   [0:0] tmp_i_reg_2103;
wire   [0:0] ap_CS_fsm_state44;
wire   [0:0] tmp_3_i_fu_547_p2;
reg   [0:0] tmp_3_i_reg_2108;
wire   [63:0] sel_tmp6_i_fu_686_p3;
reg   [63:0] sel_tmp6_i_reg_2113;
reg   [0:0] isneg_reg_2118;
wire   [0:0] ap_CS_fsm_state45;
wire   [53:0] p_Result_17_fu_759_p1;
reg   [53:0] p_Result_17_reg_2128;
wire   [53:0] man_V_1_fu_763_p2;
reg   [53:0] man_V_1_reg_2133;
wire   [0:0] tmp_10_fu_769_p2;
reg   [0:0] tmp_10_reg_2138;
wire   [11:0] F2_fu_775_p2;
reg   [11:0] F2_reg_2146;
wire   [0:0] QUAN_INC_fu_791_p2;
reg   [0:0] QUAN_INC_reg_2155;
wire   [11:0] sh_amt_fu_809_p3;
reg   [11:0] sh_amt_reg_2160;
wire   [0:0] tmp_21_fu_817_p2;
reg   [0:0] tmp_21_reg_2167;
reg   [10:0] tmp_78_reg_2172;
wire  signed [31:0] sh_amt_cast_fu_852_p1;
reg  signed [31:0] sh_amt_cast_reg_2177;
wire   [0:0] ap_CS_fsm_state46;
wire   [0:0] tmp_13_fu_855_p2;
reg   [0:0] tmp_13_reg_2182;
wire   [2:0] tmp_59_fu_860_p1;
reg   [2:0] tmp_59_reg_2187;
reg   [0:0] tmp_76_reg_2193;
wire   [2:0] p_Val2_6_fu_938_p2;
reg   [2:0] p_Val2_6_reg_2199;
reg   [0:0] tmp_77_reg_2205;
wire   [0:0] sel_tmp2_fu_958_p2;
reg   [0:0] sel_tmp2_reg_2211;
wire   [0:0] sel_tmp6_fu_968_p2;
reg   [0:0] sel_tmp6_reg_2217;
wire   [0:0] icmp_fu_974_p2;
reg   [0:0] icmp_reg_2224;
wire   [11:0] pos1_fu_979_p2;
reg   [11:0] pos1_reg_2230;
wire   [0:0] tmp_25_fu_997_p2;
reg   [0:0] tmp_25_reg_2235;
wire   [0:0] rev_fu_1011_p2;
reg   [0:0] rev_reg_2242;
wire   [0:0] Range1_all_ones_1_fu_1037_p2;
reg   [0:0] Range1_all_ones_1_reg_2249;
reg   [0:0] tmp_82_reg_2256;
wire   [0:0] tmp_29_fu_1051_p2;
reg   [0:0] tmp_29_reg_2261;
wire   [0:0] Range2_all_ones_fu_1073_p2;
reg   [0:0] Range2_all_ones_reg_2267;
wire   [0:0] tmp_31_fu_1079_p2;
reg   [0:0] tmp_31_reg_2272;
wire   [0:0] Range1_all_zeros_1_fu_1091_p2;
reg   [0:0] Range1_all_zeros_1_reg_2277;
wire   [0:0] sel_tmp11_fu_1109_p2;
reg   [0:0] sel_tmp11_reg_2282;
wire   [2:0] p_Val2_7_fu_1161_p3;
reg   [2:0] p_Val2_7_reg_2288;
wire   [0:0] ap_CS_fsm_state47;
wire   [0:0] sign_assign_fu_1361_p3;
reg   [0:0] sign_assign_reg_2295;
wire   [0:0] overflow_fu_1391_p2;
reg   [0:0] overflow_reg_2301;
wire   [0:0] brmerge121_demorgan_s_fu_1397_p2;
reg   [0:0] brmerge121_demorgan_s_reg_2307;
wire   [31:0] tmp_8_fu_1403_p1;
reg   [31:0] tmp_8_reg_2313;
wire   [0:0] ap_CS_fsm_state48;
wire   [31:0] tmp_14_fu_1406_p1;
reg   [31:0] tmp_14_reg_2318;
wire  signed [15:0] Wout_V_fu_1544_p1;
reg  signed [15:0] Wout_V_reg_2325;
wire   [31:0] tmp_36_fu_1548_p1;
reg   [31:0] tmp_36_reg_2331;
wire   [31:0] rhs_V_1_fu_1552_p1;
reg   [31:0] rhs_V_1_reg_2336;
wire   [0:0] tmp_37_fu_1555_p2;
reg   [0:0] tmp_37_reg_2344;
wire   [31:0] grp_fu_414_p1;
reg   [31:0] tmp_40_reg_2348;
wire   [31:0] p_sum_fu_1579_p3;
reg   [31:0] p_sum_reg_2353;
wire  signed [31:0] tmp48_fu_1943_p2;
reg  signed [31:0] tmp48_reg_2358;
wire   [31:0] i_op_assign_18_cast_fu_1587_p1;
reg   [31:0] i_op_assign_18_cast_reg_2363;
wire   [0:0] ap_CS_fsm_state49;
wire   [15:0] c_fu_1596_p2;
reg   [15:0] c_reg_2372;
wire   [15:0] next_mul9_fu_1602_p2;
reg   [15:0] next_mul9_reg_2377;
wire   [0:0] ap_CS_fsm_state50;
wire   [15:0] i_fu_1616_p2;
reg   [15:0] i_reg_2385;
wire   [31:0] p_4_fu_1948_p2;
reg   [31:0] p_4_reg_2390;
wire   [0:0] exitcond1_fu_1611_p2;
wire   [15:0] next_mul_fu_1622_p2;
reg   [15:0] next_mul_reg_2395;
wire   [0:0] ap_CS_fsm_state51;
wire   [31:0] i_op_assign_16_cast_fu_1627_p1;
reg   [31:0] i_op_assign_16_cast_reg_2400;
wire   [15:0] j_fu_1636_p2;
reg   [15:0] j_reg_2408;
wire   [7:0] ii_fu_1647_p2;
reg   [7:0] ii_reg_2416;
wire   [0:0] ap_CS_fsm_state52;
wire   [0:0] exitcond2_fu_1642_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_45_fu_1672_p2;
reg   [31:0] tmp_45_reg_2426;
wire   [0:0] ap_CS_fsm_state54;
wire   [7:0] jj_fu_1682_p2;
reg   [7:0] jj_reg_2436;
wire   [0:0] ap_CS_fsm_state55;
wire   [15:0] w_V_fu_1692_p2;
reg  signed [15:0] w_V_reg_2441;
wire   [0:0] exitcond3_fu_1677_p2;
(* use_dsp48 = "no" *) wire   [31:0] feature_in2_sum_fu_1701_p2;
reg   [31:0] feature_in2_sum_reg_2448;
wire   [0:0] ap_CS_fsm_state56;
(* use_dsp48 = "no" *) wire   [31:0] feature_in2_sum5_fu_1708_p2;
reg   [31:0] feature_in2_sum5_reg_2453;
reg    ap_sig_ioackin_gmem_ARREADY;
wire   [0:0] grp_fu_417_p2;
reg   [0:0] tmp_66_reg_2470;
wire   [0:0] ap_CS_fsm_state65;
reg   [0:0] tmp_56_reg_2475;
wire   [31:0] sum_3_feature_in_loa_fu_1807_p3;
wire   [0:0] ap_CS_fsm_state66;
wire   [31:0] feature_in_load_1_su_fu_1898_p3;
(* use_dsp48 = "no" *) wire   [31:0] feature_in2_sum6_fu_1909_p2;
reg   [31:0] feature_in2_sum6_reg_2490;
wire   [0:0] ap_CS_fsm_state67;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] sum_2_reg_2501;
wire   [0:0] ap_CS_fsm_state80;
wire   [31:0] grp_fu_409_p2;
wire   [0:0] ap_CS_fsm_state97;
wire   [31:0] grp_fu_1923_p2;
reg   [31:0] tmp1_reg_2516;
wire   [0:0] ap_CS_fsm_state99;
wire   [31:0] feature_out4_sum_fu_1932_p2;
reg   [31:0] feature_out4_sum_reg_2521;
wire   [0:0] ap_CS_fsm_state100;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [15:0] op_assign_s_reg_275;
reg   [15:0] i_op_assign_s_reg_286;
wire   [0:0] exitcond_fu_1631_p2;
wire   [0:0] exitcond4_fu_1591_p2;
reg   [15:0] phi_mul8_reg_297;
reg   [15:0] i_op_assign_2_reg_309;
reg   [15:0] phi_mul_reg_320;
reg   [31:0] i_op_assign_1_reg_332;
reg   [7:0] i_op_assign_3_reg_342;
reg   [31:0] sum_3_reg_353;
wire   [0:0] ap_CS_fsm_state82;
reg   [7:0] i_op_assign_4_reg_365;
reg   [31:0] sum_3_be_reg_376;
wire   [0:0] ap_CS_fsm_state81;
reg   [31:0] sum_5_reg_392;
wire   [31:0] tmp_6_i_fu_529_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire   [0:0] ap_CS_fsm_state76;
wire   [31:0] grp_fu_414_p0;
reg   [63:0] grp_fu_422_p0;
reg   [63:0] grp_fu_422_p1;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state38;
wire   [0:0] ap_CS_fsm_state7;
reg   [31:0] grp_fu_431_p0;
wire   [31:0] grp_fu_434_p0;
wire   [7:0] r_V_5_fu_487_p0;
wire   [7:0] r_V_5_fu_487_p1;
wire   [63:0] p_Val2_s_fu_493_p1;
wire   [5:0] index_V_fu_519_p4;
wire   [0:0] tmp_4_i_fu_552_p2;
wire   [0:0] tmp_9_i_fu_557_p2;
wire   [63:0] p_Result_13_fu_572_p3;
wire   [63:0] p_Result_14_fu_583_p3;
wire   [63:0] mask_i_cast_fu_568_p1;
wire   [63:0] p_Val2_8_fu_590_p2;
wire   [10:0] loc_V_2_fu_604_p4;
wire   [0:0] p_Result_15_fu_596_p3;
wire   [51:0] loc_V_3_fu_614_p1;
wire   [51:0] xs_sig_V_1_fu_629_p3;
wire   [51:0] tmp_5_i_fu_635_p2;
wire   [0:0] xs_sign_V_fu_624_p2;
wire   [10:0] xs_exp_V_fu_618_p3;
wire   [51:0] xs_sig_V_fu_641_p2;
wire   [63:0] p_Result_16_fu_647_p4;
wire   [0:0] or_cond_i_fu_562_p2;
wire   [0:0] sel_tmp_i_fu_661_p2;
wire   [0:0] sel_tmp1_i_fu_666_p2;
wire   [63:0] ret_i_i_i_i_fu_579_p1;
wire   [0:0] sel_tmp5_demorgan_i_fu_680_p2;
wire   [63:0] sel_tmp2_i_fu_672_p3;
wire   [63:0] ret_i_i_i_fu_657_p1;
wire   [0:0] sel_tmp7_i_fu_694_p2;
wire   [0:0] sel_tmp8_i_fu_699_p2;
wire   [63:0] v_assign_fu_704_p3;
wire   [63:0] ireg_V_fu_711_p1;
wire   [10:0] exp_tmp_V_fu_727_p4;
wire   [11:0] tmp_9_fu_737_p1;
wire   [51:0] tmp_48_fu_747_p1;
wire   [52:0] tmp_1_fu_751_p3;
wire   [62:0] tmp_38_fu_715_p1;
wire   [10:0] tmp_57_fu_781_p4;
wire   [11:0] tmp_11_fu_797_p2;
wire   [11:0] tmp_12_fu_803_p2;
wire   [11:0] exp_V_fu_741_p2;
wire   [11:0] tmp67_cast_cast_fu_823_p3;
wire   [11:0] tmp_24_fu_831_p2;
wire   [53:0] p_Val2_16_fu_847_p3;
wire   [53:0] tmp_17_fu_874_p1;
wire   [53:0] tmp_18_fu_878_p2;
wire   [0:0] tmp_15_fu_864_p2;
wire   [2:0] tmp_67_fu_884_p1;
wire   [2:0] p_5_fu_888_p3;
wire   [11:0] tmp_22_fu_903_p2;
wire  signed [31:0] tmp_27_cast_fu_908_p1;
wire   [0:0] tmp_75_fu_912_p3;
wire   [2:0] p_Val2_5_fu_895_p3;
wire   [0:0] qb_fu_920_p3;
wire   [2:0] tmp_23_fu_934_p1;
wire   [0:0] sel_tmp1_fu_952_p2;
wire   [0:0] sel_tmp5_fu_963_p2;
wire   [0:0] tmp_16_fu_869_p2;
wire   [11:0] pos2_fu_988_p2;
wire   [0:0] tmp_80_fu_1003_p3;
wire  signed [31:0] pos1_cast_fu_984_p1;
wire   [53:0] tmp_26_fu_1017_p1;
wire   [53:0] tmp_28_fu_1021_p2;
wire   [0:0] lD_fu_1027_p1;
wire   [0:0] tmp10_fu_1031_p2;
wire  signed [31:0] pos2_cast_fu_993_p1;
wire   [53:0] tmp_30_fu_1057_p1;
wire   [53:0] Range2_V_1_fu_1061_p2;
wire   [53:0] r_V_fu_1067_p2;
wire   [0:0] tmp_33_not_fu_1097_p2;
wire   [0:0] tmp_32_fu_1085_p2;
wire   [0:0] sel_tmp10_fu_1103_p2;
wire  signed [31:0] tmp_19_fu_1115_p1;
wire   [31:0] tmp_20_fu_1118_p2;
wire   [0:0] sel_tmp3_fu_1133_p2;
wire   [2:0] sel_tmp_fu_1127_p3;
wire   [0:0] sel_tmp7_fu_1144_p2;
wire   [0:0] sel_tmp8_fu_1149_p2;
wire   [2:0] sel_tmp4_fu_1137_p3;
wire   [2:0] tmp_69_fu_1123_p1;
wire   [2:0] sel_tmp9_fu_1154_p3;
wire   [0:0] tmp66_demorgan_fu_1168_p2;
wire   [0:0] tmp9_fu_1172_p2;
wire   [0:0] rev1_fu_1192_p2;
wire   [0:0] or_cond115_i_fu_1197_p2;
wire   [0:0] Range2_all_ones_1_i_fu_1202_p3;
wire   [0:0] Range1_all_zeros_fu_1218_p2;
wire   [0:0] or_cond117_i_fu_1209_p2;
wire   [0:0] Range1_all_ones_fu_1213_p2;
wire   [0:0] sel_tmp12_fu_1232_p3;
wire   [0:0] p_119_i_fu_1228_p2;
wire   [0:0] p_122_i_fu_1223_p2;
wire   [0:0] sel_tmp13_fu_1245_p3;
wire   [0:0] carry_1_i_fu_1178_p2;
wire   [0:0] Range1_all_ones_2_i_fu_1237_p3;
wire   [0:0] Range1_all_zeros_2_i_fu_1252_p3;
wire   [0:0] sel_tmp18_not_fu_1268_p2;
wire   [0:0] tmp11_fu_1274_p2;
wire   [0:0] carry_1_not_i_fu_1279_p2;
wire   [0:0] Range2_all_ones_1_no_fu_1284_p2;
wire   [0:0] tmp_83_fu_1302_p3;
wire   [0:0] brmerge123_i_fu_1290_p2;
wire   [0:0] Range1_all_ones_2_mu_fu_1296_p2;
wire   [0:0] p_120_i_fu_1309_p2;
wire   [0:0] Range1_all_ones_2_i_41_fu_1323_p2;
wire   [0:0] deleted_ones_fu_1315_p3;
wire   [0:0] sel_tmp14_fu_1335_p2;
wire   [0:0] newsignbit_fu_1184_p3;
wire   [0:0] tmp12_fu_1346_p2;
wire   [0:0] sel_tmp16_fu_1357_p2;
wire   [0:0] tmp_33_fu_1329_p2;
wire   [0:0] sel_tmp15_fu_1352_p2;
wire   [0:0] deleted_zeros_fu_1260_p3;
wire   [0:0] deleted_zeros_not_fu_1369_p2;
wire   [0:0] deleted_zeros_0_not_s_fu_1375_p2;
wire   [0:0] brmerge_i_fu_1380_p2;
wire   [0:0] tmp_34_fu_1386_p2;
wire   [0:0] deleted_ones_0_i_fu_1340_p2;
wire   [0:0] brmerge121_i_fu_1409_p2;
wire   [0:0] underflow_fu_1414_p2;
wire   [0:0] sign_assign_not_fu_1424_p2;
wire   [0:0] tmp13_fu_1429_p2;
wire   [0:0] brmerge_i_i_fu_1419_p2;
wire   [0:0] tmp_35_fu_1453_p2;
wire   [2:0] p_Val2_s_42_fu_1446_p3;
wire   [0:0] sel_tmp57_demorgan_fu_1465_p2;
wire   [2:0] sel_tmp17_fu_1458_p3;
wire   [0:0] brmerge_fu_1434_p2;
wire   [0:0] sel_tmp19_fu_1476_p2;
wire   [0:0] tmp37_fu_1481_p2;
wire   [0:0] sel_tmp20_fu_1487_p2;
wire   [2:0] p_Val2_12_mux_fu_1439_p3;
wire   [2:0] sel_tmp18_fu_1469_p3;
wire   [2:0] wout_V_fu_1492_p3;
wire   [1:0] ret_V_fu_1500_p4;
wire   [0:0] tmp_85_fu_1518_p1;
wire   [1:0] ret_V_1_fu_1522_p2;
wire   [0:0] tmp_84_fu_1510_p3;
wire   [1:0] p_s_fu_1528_p3;
wire   [1:0] p_1_fu_1536_p3;
wire   [0:0] tmp_41_fu_1560_p2;
wire   [0:0] tmp_42_fu_1573_p2;
wire   [31:0] sum_fu_1565_p3;
wire   [15:0] tmp_43_fu_1653_p1;
wire  signed [15:0] h_V_fu_1657_p2;
wire   [31:0] grp_fu_1667_p2;
wire   [15:0] tmp_47_fu_1688_p1;
wire  signed [31:0] grp_fu_1953_p3;
wire  signed [31:0] grp_fu_1960_p3;
wire   [31:0] sum_3_to_int1_fu_1724_p1;
wire   [31:0] feature_in_load_2_to_fu_1742_p1;
wire   [7:0] tmp_61_fu_1728_p4;
wire   [22:0] tmp_88_fu_1738_p1;
wire   [0:0] notrhs_fu_1766_p2;
wire   [0:0] notlhs_fu_1760_p2;
wire   [7:0] tmp_62_fu_1746_p4;
wire   [22:0] tmp_89_fu_1756_p1;
wire   [0:0] notrhs3_fu_1784_p2;
wire   [0:0] notlhs3_fu_1778_p2;
wire   [0:0] tmp_63_fu_1772_p2;
wire   [0:0] tmp_64_fu_1790_p2;
wire   [0:0] tmp_65_fu_1796_p2;
wire   [0:0] tmp_68_fu_1802_p2;
wire   [31:0] sum_3_to_int_fu_1815_p1;
wire   [31:0] feature_in_load_1_to_fu_1833_p1;
wire   [7:0] tmp_51_fu_1819_p4;
wire   [22:0] tmp_86_fu_1829_p1;
wire   [0:0] notrhs1_fu_1857_p2;
wire   [0:0] notlhs1_fu_1851_p2;
wire   [7:0] tmp_52_fu_1837_p4;
wire   [22:0] tmp_87_fu_1847_p1;
wire   [0:0] notrhs2_fu_1875_p2;
wire   [0:0] notlhs2_fu_1869_p2;
wire   [0:0] tmp_53_fu_1863_p2;
wire   [0:0] tmp_54_fu_1881_p2;
wire   [0:0] tmp_55_fu_1887_p2;
wire   [0:0] tmp_58_fu_1893_p2;
wire  signed [31:0] grp_fu_1967_p3;
wire  signed [31:0] grp_fu_1923_p0;
wire   [15:0] grp_fu_1923_p1;
wire   [31:0] tmp_46_fu_1928_p2;
wire   [15:0] tmp48_fu_1943_p0;
wire   [15:0] tmp48_fu_1943_p1;
wire   [15:0] p_4_fu_1948_p0;
wire   [15:0] p_4_fu_1948_p1;
wire   [15:0] grp_fu_1953_p1;
wire   [15:0] grp_fu_1960_p1;
wire   [15:0] grp_fu_1967_p1;
reg   [1:0] grp_fu_422_opcode;
reg   [106:0] ap_NS_fsm;
wire   [31:0] p_4_fu_1948_p00;
wire   [15:0] r_V_5_fu_487_p00;
wire   [15:0] r_V_5_fu_487_p10;
wire   [31:0] tmp48_fu_1943_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'b1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Pool_mask_table1 #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

Pool_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Pool_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .feature_in(feature_in),
    .feature_out(feature_out)
);

Pool_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Pool_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(feature_out4_sum_reg_2521),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_5_reg_392),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_F),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Pool_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fadd_32ns_32bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_3_reg_353),
    .din1(reg_442),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

Pool_fdiv_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fdiv_32ns_32cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_1_reg_332),
    .din1(tmp_40_reg_2348),
    .ce(1'b1),
    .dout(grp_fu_409_p2)
);

Pool_sitofp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_sitofp_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_414_p0),
    .ce(1'b1),
    .dout(grp_fu_414_p1)
);

Pool_fcmp_32ns_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Pool_fcmp_32ns_32eOg_U3(
    .din0(sum_3_reg_353),
    .din1(reg_442),
    .opcode(ap_const_lv5_2),
    .dout(grp_fu_417_p2)
);

Pool_dadddsub_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Pool_dadddsub_64nfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_422_p0),
    .din1(grp_fu_422_p1),
    .opcode(grp_fu_422_opcode),
    .ce(1'b1),
    .dout(grp_fu_422_p2)
);

Pool_ddiv_64ns_64g8j #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Pool_ddiv_64ns_64g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_const_lv64_3FF0000000000000),
    .din1(tmp_6_reg_2019),
    .ce(1'b1),
    .dout(grp_fu_426_p2)
);

Pool_sitodp_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Pool_sitodp_32ns_hbi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_431_p0),
    .ce(1'b1),
    .dout(grp_fu_431_p1)
);

Pool_sitodp_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Pool_sitodp_32ns_hbi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_434_p0),
    .ce(1'b1),
    .dout(grp_fu_434_p1)
);

Pool_mul_32s_16s_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_32s_16s_ibs_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp48_reg_2358),
    .din1(h_V_fu_1657_p2),
    .ce(1'b1),
    .dout(grp_fu_1667_p2)
);

Pool_mul_32s_16nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_32s_16nsjbC_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1923_p0),
    .din1(grp_fu_1923_p1),
    .ce(1'b1),
    .dout(grp_fu_1923_p2)
);

Pool_mul_mul_16nskbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16nskbM_U10(
    .din0(tmp48_fu_1943_p0),
    .din1(tmp48_fu_1943_p1),
    .dout(tmp48_fu_1943_p2)
);

Pool_mul_mul_16nskbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16nskbM_U11(
    .din0(p_4_fu_1948_p0),
    .din1(p_4_fu_1948_p1),
    .dout(p_4_fu_1948_p2)
);

Pool_mac_muladd_1lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_mac_muladd_1lbW_U12(
    .din0(w_V_reg_2441),
    .din1(grp_fu_1953_p1),
    .din2(tmp_45_reg_2426),
    .dout(grp_fu_1953_p3)
);

Pool_mac_muladd_1lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_mac_muladd_1lbW_U13(
    .din0(w_V_reg_2441),
    .din1(grp_fu_1960_p1),
    .din2(tmp_45_reg_2426),
    .dout(grp_fu_1960_p3)
);

Pool_mac_muladd_1lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_mac_muladd_1lbW_U14(
    .din0(w_V_reg_2441),
    .din1(grp_fu_1967_p1),
    .din2(tmp_45_reg_2426),
    .dout(grp_fu_1967_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_2) & ~(((mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)))) | ((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_1) & ~(((mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)))) | ((1'b1 == ap_CS_fsm_state68) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state68) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state101)) begin
            if (~(1'b0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
            if (~(1'b0 == ap_sig_ioackin_gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((1'b1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == exitcond_fu_1631_p2))) begin
        i_op_assign_1_reg_332 <= p_sum_reg_2353;
    end else if (((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == exitcond3_fu_1677_p2))) begin
        i_op_assign_1_reg_332 <= sum_3_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond1_fu_1611_p2 == 1'b0))) begin
        i_op_assign_2_reg_309 <= ap_const_lv16_0;
    end else if (((1'b1 == ap_CS_fsm_state107) & ~(gmem_BVALID == 1'b0))) begin
        i_op_assign_2_reg_309 <= j_reg_2408;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == exitcond_fu_1631_p2))) begin
        i_op_assign_3_reg_342 <= ap_const_lv8_0;
    end else if (((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == exitcond3_fu_1677_p2))) begin
        i_op_assign_3_reg_342 <= ii_reg_2416;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        i_op_assign_4_reg_365 <= jj_reg_2436;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        i_op_assign_4_reg_365 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (1'b0 == exitcond4_fu_1591_p2))) begin
        i_op_assign_s_reg_286 <= ap_const_lv16_0;
    end else if (((1'b1 == ap_CS_fsm_state51) & ~(1'b0 == exitcond_fu_1631_p2))) begin
        i_op_assign_s_reg_286 <= i_reg_2385;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & ~(exitcond1_fu_1611_p2 == 1'b0))) begin
        op_assign_s_reg_275 <= c_reg_2372;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        op_assign_s_reg_275 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (1'b0 == exitcond4_fu_1591_p2))) begin
        phi_mul8_reg_297 <= ap_const_lv16_0;
    end else if (((1'b1 == ap_CS_fsm_state51) & ~(1'b0 == exitcond_fu_1631_p2))) begin
        phi_mul8_reg_297 <= next_mul9_reg_2377;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond1_fu_1611_p2 == 1'b0))) begin
        phi_mul_reg_320 <= ap_const_lv16_0;
    end else if (((1'b1 == ap_CS_fsm_state107) & ~(gmem_BVALID == 1'b0))) begin
        phi_mul_reg_320 <= next_mul_reg_2395;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b1 == ap_CS_fsm_state66))) begin
        sum_3_be_reg_376 <= sum_3_feature_in_loa_fu_1807_p3;
    end else if (((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == ap_CS_fsm_state66))) begin
        sum_3_be_reg_376 <= feature_in_load_1_su_fu_1898_p3;
    end else if (((1'b1 == ap_CS_fsm_state55) & (1'b0 == exitcond3_fu_1677_p2) & (mode_V_read_reg_1974 == ap_const_lv2_3))) begin
        sum_3_be_reg_376 <= sum_3_reg_353;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        sum_3_be_reg_376 <= sum_2_reg_2501;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        sum_3_reg_353 <= sum_3_be_reg_376;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        sum_3_reg_353 <= i_op_assign_1_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (tmp_37_reg_2344 == 1'b0) & ~(1'b0 == exitcond2_fu_1642_p2))) begin
        sum_5_reg_392 <= i_op_assign_1_reg_332;
    end else if (((1'b1 == ap_CS_fsm_state97) & ~(tmp_37_reg_2344 == 1'b0))) begin
        sum_5_reg_392 <= grp_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        CHin_V_read_reg_1998 <= CHin_V;
        Kx_V_read_reg_1986 <= Kx_V;
        Ky_V_read_reg_1980 <= Ky_V;
        Win_V_read_reg_1993 <= Win_V;
        feature_in1_reg_2009 <= {{feature_in[ap_const_lv32_1F : ap_const_lv32_2]}};
        feature_out3_reg_2004 <= {{feature_out[ap_const_lv32_1F : ap_const_lv32_2]}};
        mode_V_read_reg_1974 <= mode_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        F2_reg_2146 <= F2_fu_775_p2;
        QUAN_INC_reg_2155 <= QUAN_INC_fu_791_p2;
        isneg_reg_2118 <= ireg_V_fu_711_p1[ap_const_lv32_3F];
        man_V_1_reg_2133 <= man_V_1_fu_763_p2;
        p_Result_17_reg_2128[51 : 0] <= p_Result_17_fu_759_p1[51 : 0];
        sh_amt_reg_2160 <= sh_amt_fu_809_p3;
        tmp_10_reg_2138 <= tmp_10_fu_769_p2;
        tmp_21_reg_2167 <= tmp_21_fu_817_p2;
        tmp_78_reg_2172 <= {{tmp_24_fu_831_p2[ap_const_lv32_B : ap_const_lv32_1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        Range1_all_ones_1_reg_2249 <= Range1_all_ones_1_fu_1037_p2;
        Range1_all_zeros_1_reg_2277 <= Range1_all_zeros_1_fu_1091_p2;
        Range2_all_ones_reg_2267 <= Range2_all_ones_fu_1073_p2;
        icmp_reg_2224 <= icmp_fu_974_p2;
        p_Val2_6_reg_2199 <= p_Val2_6_fu_938_p2;
        pos1_reg_2230 <= pos1_fu_979_p2;
        rev_reg_2242 <= rev_fu_1011_p2;
        sel_tmp11_reg_2282 <= sel_tmp11_fu_1109_p2;
        sel_tmp2_reg_2211 <= sel_tmp2_fu_958_p2;
        sel_tmp6_reg_2217 <= sel_tmp6_fu_968_p2;
        sh_amt_cast_reg_2177 <= sh_amt_cast_fu_852_p1;
        tmp_13_reg_2182 <= tmp_13_fu_855_p2;
        tmp_25_reg_2235 <= tmp_25_fu_997_p2;
        tmp_29_reg_2261 <= tmp_29_fu_1051_p2;
        tmp_31_reg_2272 <= tmp_31_fu_1079_p2;
        tmp_59_reg_2187 <= tmp_59_fu_860_p1;
        tmp_76_reg_2193 <= p_Val2_5_fu_895_p3[ap_const_lv32_2];
        tmp_77_reg_2205 <= p_Val2_6_fu_938_p2[ap_const_lv32_2];
        tmp_82_reg_2256 <= pos2_fu_988_p2[ap_const_lv32_B];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        Wout_V_reg_2325 <= Wout_V_fu_1544_p1;
        p_sum_reg_2353[5 : 2] <= p_sum_fu_1579_p3[5 : 2];
p_sum_reg_2353[7] <= p_sum_fu_1579_p3[7];
p_sum_reg_2353[9] <= p_sum_fu_1579_p3[9];
p_sum_reg_2353[13] <= p_sum_fu_1579_p3[13];
p_sum_reg_2353[16 : 15] <= p_sum_fu_1579_p3[16 : 15];
p_sum_reg_2353[21 : 20] <= p_sum_fu_1579_p3[21 : 20];
p_sum_reg_2353[25 : 23] <= p_sum_fu_1579_p3[25 : 23];
p_sum_reg_2353[28 : 27] <= p_sum_fu_1579_p3[28 : 27];
p_sum_reg_2353[31 : 30] <= p_sum_fu_1579_p3[31 : 30];
        rhs_V_1_reg_2336[15 : 0] <= rhs_V_1_fu_1552_p1[15 : 0];
        tmp48_reg_2358 <= tmp48_fu_1943_p2;
        tmp_14_reg_2318[29 : 0] <= tmp_14_fu_1406_p1[29 : 0];
        tmp_36_reg_2331[15 : 0] <= tmp_36_fu_1548_p1[15 : 0];
        tmp_37_reg_2344 <= tmp_37_fu_1555_p2;
        tmp_40_reg_2348 <= grp_fu_414_p1;
        tmp_8_reg_2313[29 : 0] <= tmp_8_fu_1403_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        brmerge121_demorgan_s_reg_2307 <= brmerge121_demorgan_s_fu_1397_p2;
        overflow_reg_2301 <= overflow_fu_1391_p2;
        p_Val2_7_reg_2288 <= p_Val2_7_fu_1161_p3;
        sign_assign_reg_2295 <= sign_assign_fu_1361_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        c_reg_2372 <= c_fu_1596_p2;
        i_op_assign_18_cast_reg_2363[15 : 0] <= i_op_assign_18_cast_fu_1587_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == ap_CS_fsm_state56))) begin
        feature_in2_sum5_reg_2453 <= feature_in2_sum5_fu_1708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        feature_in2_sum6_reg_2490 <= feature_in2_sum6_fu_1909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b1 == ap_CS_fsm_state56))) begin
        feature_in2_sum_reg_2448 <= feature_in2_sum_fu_1701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        feature_out4_sum_reg_2521 <= feature_out4_sum_fu_1932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_op_assign_16_cast_reg_2400[15 : 0] <= i_op_assign_16_cast_fu_1627_p1[15 : 0];
        j_reg_2408 <= j_fu_1636_p2;
        next_mul_reg_2395 <= next_mul_fu_1622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_op_assign_reg_2035 <= grp_fu_431_p1;
        tmp_3_reg_2040 <= grp_fu_434_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        i_reg_2385 <= i_fu_1616_p2;
        next_mul9_reg_2377 <= next_mul9_fu_1602_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ii_reg_2416 <= ii_fu_1647_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        jj_reg_2436 <= jj_fu_1682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        lhs_V_reg_2055[7 : 0] <= lhs_V_fu_484_p1[7 : 0];
        r_V_5_reg_2060 <= r_V_5_fu_487_p2;
        rhs_V_reg_2050[7 : 0] <= rhs_V_fu_481_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        loc_V_1_reg_2082 <= loc_V_1_fu_515_p1;
        loc_V_reg_2074 <= {{p_Val2_s_fu_493_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
        p_Result_s_reg_2065 <= p_Val2_s_fu_493_p1[ap_const_lv32_3F];
        tmp_27_reg_2093 <= tmp_27_fu_534_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond1_fu_1611_p2 == 1'b0))) begin
        p_4_reg_2390 <= p_4_fu_1948_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_437 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state64) & (mode_V_read_reg_1974 == ap_const_lv2_2) & ~(ap_condition_391 == 1'b1)) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == ap_CS_fsm_state64) & ~(ap_condition_391 == 1'b1)) | ((1'b1 == ap_CS_fsm_state75) & ~(gmem_RVALID == 1'b0)))) begin
        reg_442 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        sel_tmp6_i_reg_2113 <= sel_tmp6_i_fu_686_p3;
        tmp_3_i_reg_2108 <= tmp_3_i_fu_547_p2;
        tmp_i_reg_2103 <= tmp_i_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        sum_2_reg_2501 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        tmp1_reg_2516 <= grp_fu_1923_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_45_reg_2426 <= tmp_45_fu_1672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == ap_CS_fsm_state65))) begin
        tmp_56_reg_2475 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b1 == ap_CS_fsm_state65))) begin
        tmp_66_reg_2470 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_6_reg_2019 <= grp_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_7_reg_2045 <= grp_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_s_reg_2024[15 : 0] <= tmp_s_fu_473_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'b0 == exitcond3_fu_1677_p2))) begin
        w_V_reg_2441 <= w_V_fu_1692_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~(1'b0 == exitcond4_fu_1591_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~(1'b0 == exitcond4_fu_1591_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state68)) begin
            gmem_ARADDR = feature_in2_sum6_reg_2490;
        end else if (((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_1))) begin
            gmem_ARADDR = feature_in2_sum5_reg_2453;
        end else if (((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_2))) begin
            gmem_ARADDR = feature_in2_sum_reg_2448;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state68) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) & ~(gmem_BVALID == 1'b0))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state64) & (mode_V_read_reg_1974 == ap_const_lv2_2) & ~(ap_condition_391 == 1'b1)) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == ap_CS_fsm_state64) & ~(ap_condition_391 == 1'b1)) | ((1'b1 == ap_CS_fsm_state75) & ~(gmem_RVALID == 1'b0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | ((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_1)) | ((1'b1 == ap_CS_fsm_state57) & (mode_V_read_reg_1974 == ap_const_lv2_2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b1 == ap_CS_fsm_state64)) | ((1'b1 == ap_CS_fsm_state64) & (mode_V_read_reg_1974 == ap_const_lv2_2)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_422_opcode = ap_const_lv2_1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_422_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_422_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_422_p0 = reg_437;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_422_p0 = i_op_assign_reg_2035;
    end else begin
        grp_fu_422_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_422_p1 = tmp_7_reg_2045;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_422_p1 = tmp_3_reg_2040;
    end else begin
        grp_fu_422_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_431_p0 = tmp_s_fu_473_p1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_431_p0 = tmp_5_fu_468_p1;
    end else begin
        grp_fu_431_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (~(1'b0 == exitcond4_fu_1591_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (~(exitcond1_fu_1611_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            if (~(1'b0 == exitcond_fu_1631_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((tmp_37_reg_2344 == 1'b0) & ~(1'b0 == exitcond2_fu_1642_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else if ((~(tmp_37_reg_2344 == 1'b0) & ~(1'b0 == exitcond2_fu_1642_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (~(1'b0 == exitcond3_fu_1677_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else if (((1'b0 == exitcond3_fu_1677_p2) & (mode_V_read_reg_1974 == ap_const_lv2_3))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else if (((1'b0 == exitcond3_fu_1677_p2) & (mode_V_read_reg_1974 == ap_const_lv2_0))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if ((~(((mode_V_read_reg_1974 == ap_const_lv2_2) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY))) & ((mode_V_read_reg_1974 == ap_const_lv2_1) | (mode_V_read_reg_1974 == ap_const_lv2_2)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if ((~(ap_condition_391 == 1'b1) & ((mode_V_read_reg_1974 == ap_const_lv2_1) | (mode_V_read_reg_1974 == ap_const_lv2_2)))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (~(gmem_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_WREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if (~(gmem_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_775_p2 = (ap_const_lv12_433 - tmp_9_fu_737_p1);

assign QUAN_INC_fu_791_p2 = (($signed(tmp_57_fu_781_p4) > $signed(11'b00000000000)) ? 1'b1 : 1'b0);

assign Range1_all_ones_1_fu_1037_p2 = (tmp10_fu_1031_p2 & tmp_25_fu_997_p2);

assign Range1_all_ones_2_i_41_fu_1323_p2 = (carry_1_i_fu_1178_p2 & Range1_all_ones_2_i_fu_1237_p3);

assign Range1_all_ones_2_i_fu_1237_p3 = ((or_cond117_i_fu_1209_p2[0:0] === 1'b1) ? Range1_all_ones_fu_1213_p2 : sel_tmp12_fu_1232_p3);

assign Range1_all_ones_2_mu_fu_1296_p2 = (Range1_all_ones_2_i_fu_1237_p3 & carry_1_not_i_fu_1279_p2);

assign Range1_all_ones_fu_1213_p2 = (Range2_all_ones_1_i_fu_1202_p3 & Range1_all_ones_1_reg_2249);

assign Range1_all_zeros_1_fu_1091_p2 = ((p_Val2_16_fu_847_p3 == ap_const_lv54_0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_i_fu_1252_p3 = ((or_cond117_i_fu_1209_p2[0:0] === 1'b1) ? p_122_i_fu_1223_p2 : sel_tmp13_fu_1245_p3);

assign Range1_all_zeros_fu_1218_p2 = (Range1_all_ones_1_reg_2249 ^ 1'b1);

assign Range2_V_1_fu_1061_p2 = p_Val2_16_fu_847_p3 >> tmp_30_fu_1057_p1;

assign Range2_all_ones_1_i_fu_1202_p3 = ((or_cond115_i_fu_1197_p2[0:0] === 1'b1) ? Range2_all_ones_reg_2267 : rev1_fu_1192_p2);

assign Range2_all_ones_1_no_fu_1284_p2 = (Range2_all_ones_1_i_fu_1202_p3 ^ 1'b1);

assign Range2_all_ones_fu_1073_p2 = ((Range2_V_1_fu_1061_p2 == r_V_fu_1067_p2) ? 1'b1 : 1'b0);

assign Wout_V_fu_1544_p1 = $signed(p_1_fu_1536_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state100 = ap_CS_fsm[ap_const_lv32_63];

assign ap_CS_fsm_state101 = ap_CS_fsm[ap_const_lv32_64];

assign ap_CS_fsm_state102 = ap_CS_fsm[ap_const_lv32_65];

assign ap_CS_fsm_state107 = ap_CS_fsm[ap_const_lv32_6A];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state46 = ap_CS_fsm[ap_const_lv32_2D];

assign ap_CS_fsm_state47 = ap_CS_fsm[ap_const_lv32_2E];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_30];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_31];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state64 = ap_CS_fsm[ap_const_lv32_3F];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_40];

assign ap_CS_fsm_state66 = ap_CS_fsm[ap_const_lv32_41];

assign ap_CS_fsm_state67 = ap_CS_fsm[ap_const_lv32_42];

assign ap_CS_fsm_state68 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state75 = ap_CS_fsm[ap_const_lv32_4A];

assign ap_CS_fsm_state76 = ap_CS_fsm[ap_const_lv32_4B];

assign ap_CS_fsm_state80 = ap_CS_fsm[ap_const_lv32_4F];

assign ap_CS_fsm_state81 = ap_CS_fsm[ap_const_lv32_50];

assign ap_CS_fsm_state82 = ap_CS_fsm[ap_const_lv32_51];

assign ap_CS_fsm_state97 = ap_CS_fsm[ap_const_lv32_60];

assign ap_CS_fsm_state99 = ap_CS_fsm[ap_const_lv32_62];

always @ (*) begin
    ap_condition_391 = (((mode_V_read_reg_1974 == ap_const_lv2_2) & (gmem_RVALID == 1'b0)) | ((mode_V_read_reg_1974 == ap_const_lv2_1) & (gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge121_demorgan_s_fu_1397_p2 = (newsignbit_fu_1184_p3 & deleted_ones_0_i_fu_1340_p2);

assign brmerge121_i_fu_1409_p2 = (brmerge121_demorgan_s_reg_2307 ^ 1'b1);

assign brmerge123_i_fu_1290_p2 = (carry_1_not_i_fu_1279_p2 | Range2_all_ones_1_no_fu_1284_p2);

assign brmerge_fu_1434_p2 = (tmp13_fu_1429_p2 | brmerge121_demorgan_s_reg_2307);

assign brmerge_i_fu_1380_p2 = (newsignbit_fu_1184_p3 | deleted_zeros_0_not_s_fu_1375_p2);

assign brmerge_i_i_fu_1419_p2 = (underflow_fu_1414_p2 | overflow_reg_2301);

assign c_fu_1596_p2 = (op_assign_s_reg_275 + ap_const_lv16_1);

assign carry_1_i_fu_1178_p2 = (sel_tmp3_fu_1133_p2 & tmp9_fu_1172_p2);

assign carry_1_not_i_fu_1279_p2 = (tmp11_fu_1274_p2 | tmp_77_reg_2205);

assign deleted_ones_0_i_fu_1340_p2 = (deleted_ones_fu_1315_p3 | sel_tmp14_fu_1335_p2);

assign deleted_ones_fu_1315_p3 = ((brmerge123_i_fu_1290_p2[0:0] === 1'b1) ? Range1_all_ones_2_mu_fu_1296_p2 : p_120_i_fu_1309_p2);

assign deleted_zeros_0_not_s_fu_1375_p2 = (tmp_25_reg_2235 & deleted_zeros_not_fu_1369_p2);

assign deleted_zeros_fu_1260_p3 = ((carry_1_i_fu_1178_p2[0:0] === 1'b1) ? Range1_all_ones_2_i_fu_1237_p3 : Range1_all_zeros_2_i_fu_1252_p3);

assign deleted_zeros_not_fu_1369_p2 = (deleted_zeros_fu_1260_p3 ^ 1'b1);

assign exitcond1_fu_1611_p2 = ((i_op_assign_s_reg_286 == Wout_V_reg_2325) ? 1'b1 : 1'b0);

assign exitcond2_fu_1642_p2 = ((i_op_assign_3_reg_342 == Ky_V_read_reg_1980) ? 1'b1 : 1'b0);

assign exitcond3_fu_1677_p2 = ((i_op_assign_4_reg_365 == Kx_V_read_reg_1986) ? 1'b1 : 1'b0);

assign exitcond4_fu_1591_p2 = ((op_assign_s_reg_275 == CHin_V_read_reg_1998) ? 1'b1 : 1'b0);

assign exitcond_fu_1631_p2 = ((i_op_assign_2_reg_309 == Wout_V_reg_2325) ? 1'b1 : 1'b0);

assign exp_V_fu_741_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_9_fu_737_p1));

assign exp_tmp_V_fu_727_p4 = {{ireg_V_fu_711_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign feature_in2_sum5_fu_1708_p2 = ($signed(grp_fu_1960_p3) + $signed(tmp_14_reg_2318));

assign feature_in2_sum6_fu_1909_p2 = ($signed(tmp_14_reg_2318) + $signed(grp_fu_1967_p3));

assign feature_in2_sum_fu_1701_p2 = ($signed(grp_fu_1953_p3) + $signed(tmp_14_reg_2318));

assign feature_in_load_1_su_fu_1898_p3 = ((tmp_58_fu_1893_p2[0:0] === 1'b1) ? reg_442 : sum_3_reg_353);

assign feature_in_load_1_to_fu_1833_p1 = reg_442;

assign feature_in_load_2_to_fu_1742_p1 = reg_442;

assign feature_out4_sum_fu_1932_p2 = (tmp_8_reg_2313 + tmp_46_fu_1928_p2);

assign grp_fu_1923_p0 = (p_4_reg_2390 + i_op_assign_16_cast_reg_2400);

assign grp_fu_1923_p1 = rhs_V_1_reg_2336;

assign grp_fu_1953_p1 = rhs_V_1_reg_2336;

assign grp_fu_1960_p1 = rhs_V_1_reg_2336;

assign grp_fu_1967_p1 = rhs_V_1_reg_2336;

assign grp_fu_414_p0 = r_V_5_reg_2060;

assign grp_fu_434_p0 = Kx_V_read_reg_1986;

assign h_V_fu_1657_p2 = (tmp_43_fu_1653_p1 + phi_mul8_reg_297);

assign i_fu_1616_p2 = (i_op_assign_s_reg_286 + ap_const_lv16_1);

assign i_op_assign_16_cast_fu_1627_p1 = i_op_assign_2_reg_309;

assign i_op_assign_18_cast_fu_1587_p1 = op_assign_s_reg_275;

assign icmp_fu_974_p2 = (($signed(tmp_78_reg_2172) > $signed(11'b00000000000)) ? 1'b1 : 1'b0);

assign ii_fu_1647_p2 = (i_op_assign_3_reg_342 + ap_const_lv8_1);

assign index_V_fu_519_p4 = {{p_Val2_s_fu_493_p1[ap_const_lv32_39 : ap_const_lv32_34]}};

assign ireg_V_fu_711_p1 = v_assign_fu_704_p3;

assign j_fu_1636_p2 = (i_op_assign_2_reg_309 + ap_const_lv16_1);

assign jj_fu_1682_p2 = (i_op_assign_4_reg_365 + ap_const_lv8_1);

assign lD_fu_1027_p1 = tmp_28_fu_1021_p2[0:0];

assign lhs_V_fu_484_p1 = Kx_V_read_reg_1986;

assign loc_V_1_fu_515_p1 = p_Val2_s_fu_493_p1[51:0];

assign loc_V_2_fu_604_p4 = {{p_Val2_8_fu_590_p2[ap_const_lv32_3E : ap_const_lv32_34]}};

assign loc_V_3_fu_614_p1 = p_Val2_8_fu_590_p2[51:0];

assign man_V_1_fu_763_p2 = (ap_const_lv54_0 - p_Result_17_fu_759_p1);

assign mask_i_cast_fu_568_p1 = mask_table1_q0;

assign mask_table1_address0 = tmp_6_i_fu_529_p1;

assign newsignbit_fu_1184_p3 = p_Val2_7_fu_1161_p3[ap_const_lv32_2];

assign next_mul9_fu_1602_p2 = (phi_mul8_reg_297 + rhs_V_reg_2050);

assign next_mul_fu_1622_p2 = (phi_mul_reg_320 + lhs_V_reg_2055);

assign notlhs1_fu_1851_p2 = ((tmp_51_fu_1819_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs2_fu_1869_p2 = ((tmp_52_fu_1837_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs3_fu_1778_p2 = ((tmp_62_fu_1746_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_1760_p2 = ((tmp_61_fu_1728_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs1_fu_1857_p2 = ((tmp_86_fu_1829_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs2_fu_1875_p2 = ((tmp_87_fu_1847_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs3_fu_1784_p2 = ((tmp_89_fu_1756_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_1766_p2 = ((tmp_88_fu_1738_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign or_cond115_i_fu_1197_p2 = (tmp_29_reg_2261 & rev1_fu_1192_p2);

assign or_cond117_i_fu_1209_p2 = (tmp_29_reg_2261 & rev_reg_2242);

assign or_cond_i_fu_562_p2 = (tmp_4_i_fu_552_p2 & tmp_9_i_fu_557_p2);

assign overflow_fu_1391_p2 = (brmerge_i_fu_1380_p2 & tmp_34_fu_1386_p2);

assign p_119_i_fu_1228_p2 = (Range1_all_zeros_1_reg_2277 | rev_reg_2242);

assign p_120_i_fu_1309_p2 = (tmp_83_fu_1302_p3 | Range1_all_zeros_fu_1218_p2);

assign p_122_i_fu_1223_p2 = (tmp_31_reg_2272 & Range1_all_zeros_fu_1218_p2);

assign p_1_fu_1536_p3 = ((tmp_84_fu_1510_p3[0:0] === 1'b1) ? p_s_fu_1528_p3 : ret_V_fu_1500_p4);

assign p_4_fu_1948_p0 = p_4_fu_1948_p00;

assign p_4_fu_1948_p00 = i_op_assign_s_reg_286;

assign p_4_fu_1948_p1 = tmp_36_reg_2331;

assign p_5_fu_888_p3 = ((isneg_reg_2118[0:0] === 1'b1) ? ap_const_lv3_7 : ap_const_lv3_0);

assign p_Result_13_fu_572_p3 = {{p_Result_s_reg_2065}, {ap_const_lv63_0}};

assign p_Result_14_fu_583_p3 = {{1'b0}, {tmp_27_reg_2093}};

assign p_Result_15_fu_596_p3 = p_Val2_8_fu_590_p2[ap_const_lv32_3F];

assign p_Result_16_fu_647_p4 = {{{xs_sign_V_fu_624_p2}, {xs_exp_V_fu_618_p3}}, {xs_sig_V_fu_641_p2}};

assign p_Result_17_fu_759_p1 = tmp_1_fu_751_p3;

assign p_Val2_12_mux_fu_1439_p3 = ((brmerge_i_i_fu_1419_p2[0:0] === 1'b1) ? ap_const_lv3_3 : p_Val2_7_reg_2288);

assign p_Val2_16_fu_847_p3 = ((isneg_reg_2118[0:0] === 1'b1) ? man_V_1_reg_2133 : p_Result_17_reg_2128);

assign p_Val2_5_fu_895_p3 = ((tmp_15_fu_864_p2[0:0] === 1'b1) ? tmp_67_fu_884_p1 : p_5_fu_888_p3);

assign p_Val2_6_fu_938_p2 = (tmp_23_fu_934_p1 + p_Val2_5_fu_895_p3);

assign p_Val2_7_fu_1161_p3 = ((sel_tmp6_reg_2217[0:0] === 1'b1) ? tmp_69_fu_1123_p1 : sel_tmp9_fu_1154_p3);

assign p_Val2_8_fu_590_p2 = (p_Result_14_fu_583_p3 + mask_i_cast_fu_568_p1);

assign p_Val2_s_42_fu_1446_p3 = ((tmp_10_reg_2138[0:0] === 1'b1) ? ap_const_lv3_0 : ap_const_lv3_4);

assign p_Val2_s_fu_493_p1 = reg_437;

assign p_s_fu_1528_p3 = ((tmp_85_fu_1518_p1[0:0] === 1'b1) ? ret_V_1_fu_1522_p2 : ret_V_fu_1500_p4);

assign p_sum_fu_1579_p3 = ((tmp_42_fu_1573_p2[0:0] === 1'b1) ? sum_fu_1565_p3 : ap_const_lv32_DBB1A2BC);

assign pos1_cast_fu_984_p1 = $signed(pos1_fu_979_p2);

assign pos1_fu_979_p2 = (ap_const_lv12_2 + F2_reg_2146);

assign pos2_cast_fu_993_p1 = $signed(pos2_fu_988_p2);

assign pos2_fu_988_p2 = (ap_const_lv12_3 + F2_reg_2146);

assign qb_fu_920_p3 = ((tmp_21_reg_2167[0:0] === 1'b1) ? isneg_reg_2118 : tmp_75_fu_912_p3);

assign r_V_5_fu_487_p0 = r_V_5_fu_487_p00;

assign r_V_5_fu_487_p00 = Ky_V_read_reg_1980;

assign r_V_5_fu_487_p1 = r_V_5_fu_487_p10;

assign r_V_5_fu_487_p10 = Kx_V_read_reg_1986;

assign r_V_5_fu_487_p2 = (r_V_5_fu_487_p0 * r_V_5_fu_487_p1);

assign r_V_fu_1067_p2 = ap_const_lv54_3FFFFFFFFFFFFF >> tmp_30_fu_1057_p1;

assign ret_V_1_fu_1522_p2 = (ap_const_lv2_1 + ret_V_fu_1500_p4);

assign ret_V_fu_1500_p4 = {{wout_V_fu_1492_p3[ap_const_lv32_2 : ap_const_lv32_1]}};

assign ret_i_i_i_fu_657_p1 = p_Result_16_fu_647_p4;

assign ret_i_i_i_i_fu_579_p1 = p_Result_13_fu_572_p3;

assign rev1_fu_1192_p2 = (tmp_82_reg_2256 ^ 1'b1);

assign rev_fu_1011_p2 = (tmp_80_fu_1003_p3 ^ 1'b1);

assign rhs_V_1_fu_1552_p1 = CHin_V_read_reg_1998;

assign rhs_V_fu_481_p1 = Ky_V_read_reg_1980;

assign sel_tmp10_fu_1103_p2 = (tmp_80_fu_1003_p3 | tmp_33_not_fu_1097_p2);

assign sel_tmp11_fu_1109_p2 = (tmp_32_fu_1085_p2 & sel_tmp10_fu_1103_p2);

assign sel_tmp12_fu_1232_p3 = ((sel_tmp11_reg_2282[0:0] === 1'b1) ? Range1_all_ones_1_reg_2249 : rev_reg_2242);

assign sel_tmp13_fu_1245_p3 = ((sel_tmp11_reg_2282[0:0] === 1'b1) ? Range1_all_zeros_fu_1218_p2 : p_119_i_fu_1228_p2);

assign sel_tmp14_fu_1335_p2 = (tmp_25_reg_2235 ^ 1'b1);

assign sel_tmp15_fu_1352_p2 = (tmp12_fu_1346_p2 & isneg_reg_2118);

assign sel_tmp16_fu_1357_p2 = (tmp_25_reg_2235 & isneg_reg_2118);

assign sel_tmp17_fu_1458_p3 = ((tmp_35_fu_1453_p2[0:0] === 1'b1) ? p_Val2_s_42_fu_1446_p3 : p_Val2_7_reg_2288);

assign sel_tmp18_fu_1469_p3 = ((sel_tmp57_demorgan_fu_1465_p2[0:0] === 1'b1) ? sel_tmp17_fu_1458_p3 : p_Val2_7_reg_2288);

assign sel_tmp18_not_fu_1268_p2 = (sel_tmp3_fu_1133_p2 ^ 1'b1);

assign sel_tmp19_fu_1476_p2 = (tmp_10_reg_2138 ^ 1'b1);

assign sel_tmp1_fu_952_p2 = (tmp_13_fu_855_p2 ^ 1'b1);

assign sel_tmp1_i_fu_666_p2 = (sel_tmp_i_fu_661_p2 & tmp_i_fu_542_p2);

assign sel_tmp20_fu_1487_p2 = (tmp37_fu_1481_p2 & icmp_reg_2224);

assign sel_tmp2_fu_958_p2 = (QUAN_INC_reg_2155 & sel_tmp1_fu_952_p2);

assign sel_tmp2_i_fu_672_p3 = ((sel_tmp1_i_fu_666_p2[0:0] === 1'b1) ? ret_i_i_i_i_fu_579_p1 : ap_const_lv64_3FF0000000000000);

assign sel_tmp3_fu_1133_p2 = (sel_tmp2_reg_2211 & tmp_76_reg_2193);

assign sel_tmp4_fu_1137_p3 = ((sel_tmp3_fu_1133_p2[0:0] === 1'b1) ? p_Val2_6_reg_2199 : sel_tmp_fu_1127_p3);

assign sel_tmp57_demorgan_fu_1465_p2 = (tmp_10_reg_2138 | icmp_reg_2224);

assign sel_tmp5_demorgan_i_fu_680_p2 = (tmp_i_fu_542_p2 | tmp_3_i_fu_547_p2);

assign sel_tmp5_fu_963_p2 = (($signed(F2_reg_2146) < $signed(12'b1)) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_968_p2 = (sel_tmp5_fu_963_p2 & tmp_16_fu_869_p2);

assign sel_tmp6_i_fu_686_p3 = ((sel_tmp5_demorgan_i_fu_680_p2[0:0] === 1'b1) ? sel_tmp2_i_fu_672_p3 : ret_i_i_i_fu_657_p1);

assign sel_tmp7_fu_1144_p2 = (tmp_76_reg_2193 ^ 1'b1);

assign sel_tmp7_i_fu_694_p2 = (tmp_i_reg_2103 ^ 1'b1);

assign sel_tmp8_fu_1149_p2 = (sel_tmp2_reg_2211 & sel_tmp7_fu_1144_p2);

assign sel_tmp8_i_fu_699_p2 = (tmp_3_i_reg_2108 & sel_tmp7_i_fu_694_p2);

assign sel_tmp9_fu_1154_p3 = ((sel_tmp8_fu_1149_p2[0:0] === 1'b1) ? p_Val2_6_reg_2199 : sel_tmp4_fu_1137_p3);

assign sel_tmp_fu_1127_p3 = ((tmp_13_reg_2182[0:0] === 1'b1) ? tmp_59_reg_2187 : ap_const_lv3_0);

assign sel_tmp_i_fu_661_p2 = (p_Result_s_reg_2065 | or_cond_i_fu_562_p2);

assign sh_amt_cast_fu_852_p1 = $signed(sh_amt_reg_2160);

assign sh_amt_fu_809_p3 = ((QUAN_INC_fu_791_p2[0:0] === 1'b1) ? tmp_11_fu_797_p2 : tmp_12_fu_803_p2);

assign sign_assign_fu_1361_p3 = ((sel_tmp16_fu_1357_p2[0:0] === 1'b1) ? tmp_33_fu_1329_p2 : sel_tmp15_fu_1352_p2);

assign sign_assign_not_fu_1424_p2 = (sign_assign_reg_2295 ^ 1'b1);

assign sum_3_feature_in_loa_fu_1807_p3 = ((tmp_68_fu_1802_p2[0:0] === 1'b1) ? sum_3_reg_353 : reg_442);

assign sum_3_to_int1_fu_1724_p1 = sum_3_reg_353;

assign sum_3_to_int_fu_1815_p1 = sum_3_reg_353;

assign sum_fu_1565_p3 = ((tmp_37_fu_1555_p2[0:0] === 1'b1) ? ap_const_lv32_0 : ap_const_lv32_5BB1A2BC);

assign tmp10_fu_1031_p2 = (lD_fu_1027_p1 & rev_fu_1011_p2);

assign tmp11_fu_1274_p2 = (sel_tmp6_reg_2217 | sel_tmp18_not_fu_1268_p2);

assign tmp12_fu_1346_p2 = (newsignbit_fu_1184_p3 & sel_tmp14_fu_1335_p2);

assign tmp13_fu_1429_p2 = (overflow_reg_2301 | sign_assign_not_fu_1424_p2);

assign tmp37_fu_1481_p2 = (brmerge_fu_1434_p2 & sel_tmp19_fu_1476_p2);

assign tmp48_fu_1943_p0 = tmp_s_reg_2024;

assign tmp48_fu_1943_p1 = tmp48_fu_1943_p10;

assign tmp48_fu_1943_p10 = CHin_V_read_reg_1998;

assign tmp66_demorgan_fu_1168_p2 = (tmp_77_reg_2205 | sel_tmp6_reg_2217);

assign tmp67_cast_cast_fu_823_p3 = ((QUAN_INC_fu_791_p2[0:0] === 1'b1) ? ap_const_lv12_2 : ap_const_lv12_1);

assign tmp9_fu_1172_p2 = (tmp66_demorgan_fu_1168_p2 ^ 1'b1);

assign tmp_10_fu_769_p2 = ((tmp_38_fu_715_p1 == ap_const_lv63_0) ? 1'b1 : 1'b0);

assign tmp_11_fu_797_p2 = ($signed(ap_const_lv12_FFF) + $signed(F2_fu_775_p2));

assign tmp_12_fu_803_p2 = (ap_const_lv12_1 - F2_fu_775_p2);

assign tmp_13_fu_855_p2 = ((F2_reg_2146 == ap_const_lv12_1) ? 1'b1 : 1'b0);

assign tmp_14_fu_1406_p1 = feature_in1_reg_2009;

assign tmp_15_fu_864_p2 = ((sh_amt_reg_2160 < ap_const_lv12_36) ? 1'b1 : 1'b0);

assign tmp_16_fu_869_p2 = ((sh_amt_reg_2160 < ap_const_lv12_3) ? 1'b1 : 1'b0);

assign tmp_17_fu_874_p1 = $unsigned(sh_amt_cast_fu_852_p1);

assign tmp_18_fu_878_p2 = $signed(p_Val2_16_fu_847_p3) >>> tmp_17_fu_874_p1;

assign tmp_19_fu_1115_p1 = $signed(tmp_59_reg_2187);

assign tmp_1_fu_751_p3 = {{1'b1}, {tmp_48_fu_747_p1}};

assign tmp_20_fu_1118_p2 = tmp_19_fu_1115_p1 << sh_amt_cast_reg_2177;

assign tmp_21_fu_817_p2 = (($signed(tmp_11_fu_797_p2) > $signed(12'b110110)) ? 1'b1 : 1'b0);

assign tmp_22_fu_903_p2 = ($signed(ap_const_lv12_FFE) + $signed(F2_reg_2146));

assign tmp_23_fu_934_p1 = qb_fu_920_p3;

assign tmp_24_fu_831_p2 = (exp_V_fu_741_p2 + tmp67_cast_cast_fu_823_p3);

assign tmp_25_fu_997_p2 = (($signed(pos1_fu_979_p2) < $signed(12'b110110)) ? 1'b1 : 1'b0);

assign tmp_26_fu_1017_p1 = $unsigned(pos1_cast_fu_984_p1);

assign tmp_27_cast_fu_908_p1 = $signed(tmp_22_fu_903_p2);

assign tmp_27_fu_534_p1 = p_Val2_s_fu_493_p1[62:0];

assign tmp_28_fu_1021_p2 = $signed(p_Val2_16_fu_847_p3) >>> tmp_26_fu_1017_p1;

assign tmp_29_fu_1051_p2 = (($signed(pos2_fu_988_p2) < $signed(12'b110110)) ? 1'b1 : 1'b0);

assign tmp_30_fu_1057_p1 = $unsigned(pos2_cast_fu_993_p1);

assign tmp_31_fu_1079_p2 = ((Range2_V_1_fu_1061_p2 == ap_const_lv54_0) ? 1'b1 : 1'b0);

assign tmp_32_fu_1085_p2 = ((pos2_fu_988_p2 == ap_const_lv12_36) ? 1'b1 : 1'b0);

assign tmp_33_fu_1329_p2 = (Range1_all_ones_2_i_41_fu_1323_p2 ^ 1'b1);

assign tmp_33_not_fu_1097_p2 = (tmp_29_fu_1051_p2 ^ 1'b1);

assign tmp_34_fu_1386_p2 = (isneg_reg_2118 ^ 1'b1);

assign tmp_35_fu_1453_p2 = (tmp_10_reg_2138 | underflow_fu_1414_p2);

assign tmp_36_fu_1548_p1 = $unsigned(Wout_V_fu_1544_p1);

assign tmp_37_fu_1555_p2 = ((mode_V_read_reg_1974 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign tmp_38_fu_715_p1 = ireg_V_fu_711_p1[62:0];

assign tmp_3_i_fu_547_p2 = ((loc_V_reg_2074 > ap_const_lv11_433) ? 1'b1 : 1'b0);

assign tmp_41_fu_1560_p2 = ((mode_V_read_reg_1974 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign tmp_42_fu_1573_p2 = (tmp_37_fu_1555_p2 | tmp_41_fu_1560_p2);

assign tmp_43_fu_1653_p1 = i_op_assign_3_reg_342;

assign tmp_45_fu_1672_p2 = (grp_fu_1667_p2 + i_op_assign_18_cast_reg_2363);

assign tmp_46_fu_1928_p2 = (tmp1_reg_2516 + i_op_assign_18_cast_reg_2363);

assign tmp_47_fu_1688_p1 = i_op_assign_4_reg_365;

assign tmp_48_fu_747_p1 = ireg_V_fu_711_p1[51:0];

assign tmp_4_i_fu_552_p2 = ((loc_V_1_reg_2082 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign tmp_51_fu_1819_p4 = {{sum_3_to_int_fu_1815_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_52_fu_1837_p4 = {{feature_in_load_1_to_fu_1833_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_53_fu_1863_p2 = (notrhs1_fu_1857_p2 | notlhs1_fu_1851_p2);

assign tmp_54_fu_1881_p2 = (notrhs2_fu_1875_p2 | notlhs2_fu_1869_p2);

assign tmp_55_fu_1887_p2 = (tmp_53_fu_1863_p2 & tmp_54_fu_1881_p2);

assign tmp_57_fu_781_p4 = {{F2_fu_775_p2[ap_const_lv32_B : ap_const_lv32_1]}};

assign tmp_58_fu_1893_p2 = (tmp_55_fu_1887_p2 & tmp_56_reg_2475);

assign tmp_59_fu_860_p1 = p_Val2_16_fu_847_p3[2:0];

assign tmp_5_fu_468_p1 = Sx_V;

assign tmp_5_i_fu_635_p2 = (mask_table1_q0 ^ ap_const_lv52_FFFFFFFFFFFFF);

assign tmp_61_fu_1728_p4 = {{sum_3_to_int1_fu_1724_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_62_fu_1746_p4 = {{feature_in_load_2_to_fu_1742_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_63_fu_1772_p2 = (notrhs_fu_1766_p2 | notlhs_fu_1760_p2);

assign tmp_64_fu_1790_p2 = (notrhs3_fu_1784_p2 | notlhs3_fu_1778_p2);

assign tmp_65_fu_1796_p2 = (tmp_63_fu_1772_p2 & tmp_64_fu_1790_p2);

assign tmp_67_fu_884_p1 = tmp_18_fu_878_p2[2:0];

assign tmp_68_fu_1802_p2 = (tmp_65_fu_1796_p2 & tmp_66_reg_2470);

assign tmp_69_fu_1123_p1 = tmp_20_fu_1118_p2[2:0];

assign tmp_6_i_fu_529_p1 = index_V_fu_519_p4;

assign tmp_75_fu_912_p3 = p_Val2_16_fu_847_p3[tmp_27_cast_fu_908_p1];

assign tmp_80_fu_1003_p3 = pos1_fu_979_p2[ap_const_lv32_B];

assign tmp_83_fu_1302_p3 = pos1_reg_2230[ap_const_lv32_B];

assign tmp_84_fu_1510_p3 = wout_V_fu_1492_p3[ap_const_lv32_2];

assign tmp_85_fu_1518_p1 = wout_V_fu_1492_p3[0:0];

assign tmp_86_fu_1829_p1 = sum_3_to_int_fu_1815_p1[22:0];

assign tmp_87_fu_1847_p1 = feature_in_load_1_to_fu_1833_p1[22:0];

assign tmp_88_fu_1738_p1 = sum_3_to_int1_fu_1724_p1[22:0];

assign tmp_89_fu_1756_p1 = feature_in_load_2_to_fu_1742_p1[22:0];

assign tmp_8_fu_1403_p1 = feature_out3_reg_2004;

assign tmp_9_fu_737_p1 = exp_tmp_V_fu_727_p4;

assign tmp_9_i_fu_557_p2 = ((loc_V_reg_2074 == ap_const_lv11_0) ? 1'b1 : 1'b0);

assign tmp_i_fu_542_p2 = ((loc_V_reg_2074 < ap_const_lv11_3FF) ? 1'b1 : 1'b0);

assign tmp_s_fu_473_p1 = Win_V_read_reg_1993;

assign underflow_fu_1414_p2 = (sign_assign_reg_2295 & brmerge121_i_fu_1409_p2);

assign v_assign_fu_704_p3 = ((sel_tmp8_i_fu_699_p2[0:0] === 1'b1) ? reg_437 : sel_tmp6_i_reg_2113);

assign w_V_fu_1692_p2 = (phi_mul_reg_320 + tmp_47_fu_1688_p1);

assign wout_V_fu_1492_p3 = ((sel_tmp20_fu_1487_p2[0:0] === 1'b1) ? p_Val2_12_mux_fu_1439_p3 : sel_tmp18_fu_1469_p3);

assign xs_exp_V_fu_618_p3 = ((p_Result_s_reg_2065[0:0] === 1'b1) ? loc_V_reg_2074 : loc_V_2_fu_604_p4);

assign xs_sig_V_1_fu_629_p3 = ((p_Result_s_reg_2065[0:0] === 1'b1) ? loc_V_1_reg_2082 : loc_V_3_fu_614_p1);

assign xs_sig_V_fu_641_p2 = (xs_sig_V_1_fu_629_p3 & tmp_5_i_fu_635_p2);

assign xs_sign_V_fu_624_p2 = (p_Result_s_reg_2065 | p_Result_15_fu_596_p3);

always @ (posedge ap_clk) begin
    tmp_s_reg_2024[31:16] <= 16'b0000000000000000;
    rhs_V_reg_2050[15:8] <= 8'b00000000;
    lhs_V_reg_2055[15:8] <= 8'b00000000;
    p_Result_17_reg_2128[53:52] <= 2'b01;
    tmp_8_reg_2313[31:30] <= 2'b00;
    tmp_14_reg_2318[31:30] <= 2'b00;
    tmp_36_reg_2331[31:16] <= 16'b0000000000000000;
    rhs_V_1_reg_2336[31:16] <= 16'b0000000000000000;
    p_sum_reg_2353[1:0] <= 2'b00;
    p_sum_reg_2353[6:6] <= 1'b0;
    p_sum_reg_2353[8:8] <= 1'b0;
    p_sum_reg_2353[12:10] <= 3'b000;
    p_sum_reg_2353[14:14] <= 1'b0;
    p_sum_reg_2353[19:17] <= 3'b000;
    p_sum_reg_2353[22:22] <= 1'b0;
    p_sum_reg_2353[26:26] <= 1'b0;
    p_sum_reg_2353[29] <= 1'b0;
    i_op_assign_18_cast_reg_2363[31:16] <= 16'b0000000000000000;
    i_op_assign_16_cast_reg_2400[31:16] <= 16'b0000000000000000;
end

endmodule //Pool
